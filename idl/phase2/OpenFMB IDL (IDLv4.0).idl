/*
 *  IDL file generated by RTI Connext DDS Enterprise Architect IDL 4 Add-in version 1.0
 *      Enterprise Architect File:  C:\Xtensible\OpenFMB\IDLs\Phase 2\Model\OpenFMB for IDL generation-2016-10-21 (10-31 again after v1.10, 11-04 after v1.11 & issue49).eap
 *      Date: 11/4/2016 1:47:54 PM
 */
 
/* ******************************************************************* */
/* These are UML builtin primitive types that are not primitive in IDL */
module UML_Extension {
    typedef long long dateTime;
};

/* ******************************************************************* */
/* These are Types defined in the model */

/* -----  Model: "Model"  ----- */
module OpenFMB_Information_Model {
    module openfmb {
        module breakermodule {
            struct BreakerEventProfile;
            struct BreakerReadingProfile;
            struct BreakerStatusProfile;
        }; /* module breakermodule */

        module commonmodule {
            struct ActivePower;
            struct Analog;
            struct AnalogMeasurementList;
            struct AnalogValue;
            struct BasicIntervalSchedule;
            struct BooleanMeasurement;
            struct BooleanMeasurementList;
            struct BooleanMeasurementValue;
            struct Breaker;
            struct BreakerEvent;
            struct BreakerReading;
            struct BreakerReadingList;
            struct BreakerStatus;
            struct Container;
            struct Curve;
            struct CurveData;
            struct CurveDataList;
            struct DateTimeInterval;
            struct Discrete;
            struct DiscreteMeasurementList;
            struct DiscreteValue;
            struct EnergyConsumer;
            struct ESS;
            struct ESSControl;
            struct ESSControlSchedule;
            struct ESSControlScheduleList;
            struct ESSEvent;
            struct ESSReading;
            struct ESSReadingList;
            struct ESSStatus;
            struct Event;
            struct ForecastSchedule;
            struct GeneratingUnit;
            struct GenerationControl;
            struct GenerationControlSchedule;
            struct GenerationControlScheduleList;
            struct GenerationEvent;
            struct GenerationReading;
            struct GenerationReadingList;
            struct GenerationStatus;
            typedef octet HexBinary16[2];
            struct Humidity;
            struct HumidityData;
            struct HumidityDataList;
            struct IdentifiedObject;
            struct InterchangeSchedule;
            struct InterchangeScheduleList;
            struct InterconnectionPoint;
            struct InterconnectionSchedule;
            struct InterconnectionScheduleList;
            struct IrregularTimePoint;
            struct IrregularTimePointList;
            struct LoadControl;
            struct LoadControlSchedule;
            struct LoadControlScheduleList;
            struct LoadReading;
            struct LoadReadingList;
            struct LoadStatus;
            struct Market;
            struct MarketFactorList;
            struct MarketFactors;
            struct MarketRun;
            struct MarketRunList;
            struct Meter;
            struct MotorOperatedSwitch;
            struct MotorOperatedSwitchControl;
            struct MotorOperatedSwitchControlSchedule;
            struct MotorOperatedSwitchControlScheduleList;
            struct MotorOperatedSwitchEvent;
            struct MotorOperatedSwitchReading;
            struct MotorOperatedSwitchReadingList;
            struct MotorOperatedSwitchStatus;
            struct OptimizedMicroGridMarket;
            struct PowerSystemResource;
            struct Reading;
            struct Recloser;
            struct RecloserControl;
            struct RecloserEvent;
            struct RecloserReading;
            struct RecloserReadingList;
            struct RecloserStatus;
            struct RegulatorControlSchedule;
            struct RegulatorControlScheduleList;
            struct RegulatorEvent;
            struct RegulatorReading;
            struct RegulatorReadingList;
            struct RegulatorStatus;
            struct RegulatorSystem;
            struct ResourceReading;
            struct ResourceReadingList;
            struct ResourceStatus;
            struct SecurityEvent;
            struct SetPoint;
            struct SetPointList;
            struct ShuntControl;
            struct ShuntControlSchedule;
            struct ShuntControlScheduleList;
            struct ShuntReading;
            struct ShuntReadingList;
            struct ShuntStatus;
            struct ShuntSystem;
            struct SolarCapability;
            struct SolarControl;
            struct SolarControlSchedule;
            struct SolarControlScheduleList;
            struct SolarInverter;
            struct SolarInverterEvent;
            struct SolarReading;
            struct SolarReadingList;
            struct SolarStatus;
            struct Status;
            struct StringMeasurement;
            struct StringMeasurementList;
            struct StringMeasurementValue;
            struct SunRadiation;
            struct SunRadiationData;
            struct SunRadiationDataList;
            struct Temperature;
            struct TemperatureData;
            struct TemperatureDataList;
            typedef string uuidType;
            struct WeatherData;
            struct Wind;
            struct WindData;
            struct WindDataList;
            enum BreakerReadingTypeKind {
                @value(2)                 BreakerReadingTypeKind_Hz,
                @value(3)                 BreakerReadingTypeKind_Ia,
                @value(4)                 BreakerReadingTypeKind_Ib,
                @value(5)                 BreakerReadingTypeKind_Ic,
                @value(6)                 BreakerReadingTypeKind_Amp,
                @value(7)                 BreakerReadingTypeKind_kVAa,
                @value(8)                 BreakerReadingTypeKind_kVAb,
                @value(9)                 BreakerReadingTypeKind_kVAc,
                @value(10)                 BreakerReadingTypeKind_kVA,
                @value(11)                 BreakerReadingTypeKind_kWa,
                @value(12)                 BreakerReadingTypeKind_kWb,
                @value(13)                 BreakerReadingTypeKind_kWc,
                @value(14)                 BreakerReadingTypeKind_kW,
                @value(15)                 BreakerReadingTypeKind_Va,
                @value(0)                 BreakerReadingTypeKind_none,
                @value(16)                 BreakerReadingTypeKind_Vb,
                @value(17)                 BreakerReadingTypeKind_Vc,
                @value(18)                 BreakerReadingTypeKind_Vab,
                @value(19)                 BreakerReadingTypeKind_Vbc,
                @value(20)                 BreakerReadingTypeKind_Vca,
                @value(21)                 BreakerReadingTypeKind_PAa,
                @value(22)                 BreakerReadingTypeKind_PAb,
                @value(23)                 BreakerReadingTypeKind_PAc,
                @value(24)                 BreakerReadingTypeKind_kVARa,
                @value(25)                 BreakerReadingTypeKind_kVARb,
                @value(26)                 BreakerReadingTypeKind_kVARc,
                @value(27)                 BreakerReadingTypeKind_kVAR,
                @value(1)                 BreakerReadingTypeKind_other
            };
            enum CurveNameKind {
                @value(1)                 CurveNameKind_other,
                @value(2)                 CurveNameKind_realPower,
                @value(0)                 CurveNameKind_none,
                @value(3)                 CurveNameKind_reactivePower,
                @value(4)                 CurveNameKind_frequency,
                @value(5)                 CurveNameKind_voltage,
                @value(6)                 CurveNameKind_rampRate,
                @value(7)                 CurveNameKind_peakShavingLimit,
                @value(8)                 CurveNameKind_baseLoadingLimit,
                @value(9)                 CurveNameKind_efficiency,
                @value(10)                 CurveNameKind_curtailment
            };
            enum CurveStyleKind {
                @value(2)                 CurveStyleKind_constantYValue,
                @value(3)                 CurveStyleKind_straightLineYValues,
                @value(0)                 CurveStyleKind_none,
                @value(1)                 CurveStyleKind_other
            };
            enum EnergyProductKind {
                @value(2)                 EnergyProductKind_firm,
                @value(3)                 EnergyProductKind_nfrm,
                @value(5)                 EnergyProductKind_dyn,
                @value(4)                 EnergyProductKind_whl,
                @value(0)                 EnergyProductKind_none,
                @value(1)                 EnergyProductKind_other
            };
            enum ESSControlKind {
                @value(8)                 ESSControlKind_powerRequest,
                @value(2)                 ESSControlKind_island,
                @value(3)                 ESSControlKind_resynchronization,
                @value(4)                 ESSControlKind_maintainSOC,
                @value(5)                 ESSControlKind_standby,
                @value(6)                 ESSControlKind_firm,
                @value(0)                 ESSControlKind_none,
                @value(7)                 ESSControlKind_loadFollowing,
                @value(1)                 ESSControlKind_other
            };
            enum ESSEventKind {
                @value(4)                 ESSEventKind_charging,
                @value(2)                 ESSEventKind_discharging,
                @value(0)                 ESSEventKind_none,
                @value(3)                 ESSEventKind_idle,
                @value(1)                 ESSEventKind_other
            };
            enum ESSReadingTypeKind {
                @value(2)                 ESSReadingTypeKind_Hz,
                @value(3)                 ESSReadingTypeKind_Ia,
                @value(4)                 ESSReadingTypeKind_Ib,
                @value(5)                 ESSReadingTypeKind_Ic,
                @value(6)                 ESSReadingTypeKind_Amp,
                @value(7)                 ESSReadingTypeKind_kVAa,
                @value(8)                 ESSReadingTypeKind_kVAb,
                @value(9)                 ESSReadingTypeKind_kVAc,
                @value(10)                 ESSReadingTypeKind_kVA,
                @value(11)                 ESSReadingTypeKind_kWa,
                @value(12)                 ESSReadingTypeKind_kWb,
                @value(13)                 ESSReadingTypeKind_kWc,
                @value(14)                 ESSReadingTypeKind_kW,
                @value(15)                 ESSReadingTypeKind_Va,
                @value(0)                 ESSReadingTypeKind_none,
                @value(16)                 ESSReadingTypeKind_Vb,
                @value(17)                 ESSReadingTypeKind_Vc,
                @value(18)                 ESSReadingTypeKind_Vab,
                @value(19)                 ESSReadingTypeKind_Vbc,
                @value(20)                 ESSReadingTypeKind_Vca,
                @value(21)                 ESSReadingTypeKind_PAa,
                @value(22)                 ESSReadingTypeKind_PAb,
                @value(23)                 ESSReadingTypeKind_PAc,
                @value(24)                 ESSReadingTypeKind_kVARa,
                @value(25)                 ESSReadingTypeKind_kVARb,
                @value(26)                 ESSReadingTypeKind_kVARc,
                @value(27)                 ESSReadingTypeKind_kVAR,
                @value(1)                 ESSReadingTypeKind_other
            };
            enum ExecutionKind {
                @value(5)                 ExecutionKind_da,
                @value(2)                 ExecutionKind_hasp,
                @value(4)                 ExecutionKind_rtpd,
                @value(3)                 ExecutionKind_rtd,
                @value(0)                 ExecutionKind_none,
                @value(1)                 ExecutionKind_other
            };
            enum GenerationControlKind {
                @value(4)                 GenerationControlKind_start,
                @value(2)                 GenerationControlKind_stop,
                @value(0)                 GenerationControlKind_none,
                @value(3)                 GenerationControlKind_isochronousEnabled,
                @value(1)                 GenerationControlKind_other
            };
            enum GenerationEventKind {
                @value(6)                 GenerationEventKind_generating,
                @value(2)                 GenerationEventKind_notGenerating,
                @value(0)                 GenerationEventKind_none,
                @value(3)                 GenerationEventKind_isochronousEnabled,
                @value(4)                 GenerationEventKind_alarmButGenerating,
                @value(5)                 GenerationEventKind_alarmNotGenerating,
                @value(1)                 GenerationEventKind_other
            };
            enum GenerationReadingTypeKind {
                @value(2)                 GenerationReadingTypeKind_Hz,
                @value(3)                 GenerationReadingTypeKind_Ia,
                @value(4)                 GenerationReadingTypeKind_Ib,
                @value(5)                 GenerationReadingTypeKind_Ic,
                @value(6)                 GenerationReadingTypeKind_Amp,
                @value(7)                 GenerationReadingTypeKind_kVAa,
                @value(8)                 GenerationReadingTypeKind_kVAb,
                @value(9)                 GenerationReadingTypeKind_kVAc,
                @value(10)                 GenerationReadingTypeKind_kVA,
                @value(11)                 GenerationReadingTypeKind_kWa,
                @value(12)                 GenerationReadingTypeKind_kWb,
                @value(13)                 GenerationReadingTypeKind_kWc,
                @value(14)                 GenerationReadingTypeKind_kW,
                @value(15)                 GenerationReadingTypeKind_Va,
                @value(0)                 GenerationReadingTypeKind_none,
                @value(16)                 GenerationReadingTypeKind_Vb,
                @value(17)                 GenerationReadingTypeKind_Vc,
                @value(18)                 GenerationReadingTypeKind_Vab,
                @value(19)                 GenerationReadingTypeKind_Vbc,
                @value(20)                 GenerationReadingTypeKind_Vca,
                @value(21)                 GenerationReadingTypeKind_PAa,
                @value(22)                 GenerationReadingTypeKind_PAb,
                @value(23)                 GenerationReadingTypeKind_PAc,
                @value(24)                 GenerationReadingTypeKind_kVARa,
                @value(25)                 GenerationReadingTypeKind_kVARb,
                @value(26)                 GenerationReadingTypeKind_kVARc,
                @value(27)                 GenerationReadingTypeKind_kVAR,
                @value(1)                 GenerationReadingTypeKind_other
            };
            enum InterTieDirectionKind {
                @value(4)                 InterTieDirectionKind_e,
                @value(2)                 InterTieDirectionKind_i,
                @value(3)                 InterTieDirectionKind_netzero,
                @value(0)                 InterTieDirectionKind_none,
                @value(1)                 InterTieDirectionKind_other
            };
            enum InverterModeKind {
                @value(5)                 InverterModeKind_csi,
                @value(2)                 InverterModeKind_vsiPQ,
                @value(0)                 InverterModeKind_none,
                @value(3)                 InverterModeKind_vsiVF,
                @value(4)                 InverterModeKind_vsiISO,
                @value(1)                 InverterModeKind_other
            };
            enum LoadControlKind {
                @value(3)                 LoadControlKind_start,
                @value(2)                 LoadControlKind_stop,
                @value(0)                 LoadControlKind_none,
                @value(1)                 LoadControlKind_other
            };
            enum LoadReadingTypeKind {
                @value(2)                 LoadReadingTypeKind_Hz,
                @value(3)                 LoadReadingTypeKind_Ia,
                @value(4)                 LoadReadingTypeKind_Ib,
                @value(5)                 LoadReadingTypeKind_Ic,
                @value(6)                 LoadReadingTypeKind_Amp,
                @value(7)                 LoadReadingTypeKind_kVAa,
                @value(8)                 LoadReadingTypeKind_kVAb,
                @value(9)                 LoadReadingTypeKind_kVAc,
                @value(10)                 LoadReadingTypeKind_kVA,
                @value(11)                 LoadReadingTypeKind_kWa,
                @value(12)                 LoadReadingTypeKind_kWb,
                @value(13)                 LoadReadingTypeKind_kWc,
                @value(14)                 LoadReadingTypeKind_kW,
                @value(15)                 LoadReadingTypeKind_Va,
                @value(0)                 LoadReadingTypeKind_none,
                @value(16)                 LoadReadingTypeKind_Vb,
                @value(17)                 LoadReadingTypeKind_Vc,
                @value(18)                 LoadReadingTypeKind_Vab,
                @value(19)                 LoadReadingTypeKind_Vbc,
                @value(20)                 LoadReadingTypeKind_Vca,
                @value(21)                 LoadReadingTypeKind_PAa,
                @value(22)                 LoadReadingTypeKind_PAb,
                @value(23)                 LoadReadingTypeKind_PAc,
                @value(24)                 LoadReadingTypeKind_kVARa,
                @value(25)                 LoadReadingTypeKind_kVARb,
                @value(26)                 LoadReadingTypeKind_kVARc,
                @value(27)                 LoadReadingTypeKind_kVAR,
                @value(1)                 LoadReadingTypeKind_other
            };
            enum MarketKind {
                @value(5)                 MarketKind_dam,
                @value(3)                 MarketKind_rtm,
                @value(2)                 MarketKind_ham,
                @value(4)                 MarketKind_ruc,
                @value(0)                 MarketKind_none,
                @value(1)                 MarketKind_other
            };
            enum MarketProductKind {
                @value(9)                 MarketProductKind_en,
                @value(7)                 MarketProductKind_ru,
                @value(5)                 MarketProductKind_rd,
                @value(8)                 MarketProductKind_sr,
                @value(3)                 MarketProductKind_nr,
                @value(4)                 MarketProductKind_rc,
                @value(2)                 MarketProductKind_lfu,
                @value(0)                 MarketProductKind_none,
                @value(6)                 MarketProductKind_reg,
                @value(1)                 MarketProductKind_other
            };
            enum MotorOperatedSwitchControlKind {
                @value(4)                 MotorOperatedSwitchControlKind_open,
                @value(2)                 MotorOperatedSwitchControlKind_close,
                @value(3)                 MotorOperatedSwitchControlKind_syncCheck,
                @value(0)                 MotorOperatedSwitchControlKind_none,
                @value(1)                 MotorOperatedSwitchControlKind_other
            };
            enum MotorOperatedSwitchReadingTypeKind {
                @value(2)                 MotorOperatedSwitchReadingTypeKind_Hz,
                @value(3)                 MotorOperatedSwitchReadingTypeKind_Ia,
                @value(4)                 MotorOperatedSwitchReadingTypeKind_Ib,
                @value(5)                 MotorOperatedSwitchReadingTypeKind_Ic,
                @value(6)                 MotorOperatedSwitchReadingTypeKind_Amp,
                @value(7)                 MotorOperatedSwitchReadingTypeKind_kVAa,
                @value(8)                 MotorOperatedSwitchReadingTypeKind_kVAb,
                @value(9)                 MotorOperatedSwitchReadingTypeKind_kVAc,
                @value(10)                 MotorOperatedSwitchReadingTypeKind_kVA,
                @value(11)                 MotorOperatedSwitchReadingTypeKind_kWa,
                @value(12)                 MotorOperatedSwitchReadingTypeKind_kWb,
                @value(13)                 MotorOperatedSwitchReadingTypeKind_kWc,
                @value(14)                 MotorOperatedSwitchReadingTypeKind_kW,
                @value(15)                 MotorOperatedSwitchReadingTypeKind_Va,
                @value(0)                 MotorOperatedSwitchReadingTypeKind_none,
                @value(16)                 MotorOperatedSwitchReadingTypeKind_Vb,
                @value(17)                 MotorOperatedSwitchReadingTypeKind_Vc,
                @value(18)                 MotorOperatedSwitchReadingTypeKind_Vab,
                @value(19)                 MotorOperatedSwitchReadingTypeKind_Vbc,
                @value(20)                 MotorOperatedSwitchReadingTypeKind_Vca,
                @value(21)                 MotorOperatedSwitchReadingTypeKind_PAa,
                @value(22)                 MotorOperatedSwitchReadingTypeKind_PAb,
                @value(23)                 MotorOperatedSwitchReadingTypeKind_PAc,
                @value(25)                 MotorOperatedSwitchReadingTypeKind_kVARa,
                @value(26)                 MotorOperatedSwitchReadingTypeKind_kVARb,
                @value(27)                 MotorOperatedSwitchReadingTypeKind_kVARc,
                @value(24)                 MotorOperatedSwitchReadingTypeKind_kVAR,
                @value(1)                 MotorOperatedSwitchReadingTypeKind_other
            };
            enum PhaseCodeKind {
                @value(128)                 PhaseCodeKind_A,
                @value(132)                 PhaseCodeKind_AB,
                @value(224)                 PhaseCodeKind_ABC,
                @value(225)                 PhaseCodeKind_ABCN,
                @value(193)                 PhaseCodeKind_ABN,
                @value(40)                 PhaseCodeKind_AC,
                @value(41)                 PhaseCodeKind_ACN,
                @value(129)                 PhaseCodeKind_AN,
                @value(64)                 PhaseCodeKind_B,
                @value(66)                 PhaseCodeKind_BC,
                @value(97)                 PhaseCodeKind_BCN,
                @value(65)                 PhaseCodeKind_BN,
                @value(32)                 PhaseCodeKind_C,
                @value(33)                 PhaseCodeKind_CN,
                @value(16)                 PhaseCodeKind_N,
                @value(0)                 PhaseCodeKind_none,
                @value(512)                 PhaseCodeKind_s1,
                @value(768)                 PhaseCodeKind_s12,
                @value(769)                 PhaseCodeKind_s12N,
                @value(513)                 PhaseCodeKind_s1N,
                @value(256)                 PhaseCodeKind_s2,
                @value(257)                 PhaseCodeKind_s2N,
                @value(1)                 PhaseCodeKind_other
            };
            enum RecloserControlKind {
                @value(4)                 RecloserControlKind_open,
                @value(2)                 RecloserControlKind_close,
                @value(3)                 RecloserControlKind_syncCheck,
                @value(0)                 RecloserControlKind_none,
                @value(1)                 RecloserControlKind_other
            };
            enum RecloserReadingTypeKind {
                @value(2)                 RecloserReadingTypeKind_Hz,
                @value(3)                 RecloserReadingTypeKind_Ia,
                @value(4)                 RecloserReadingTypeKind_Ib,
                @value(5)                 RecloserReadingTypeKind_Ic,
                @value(6)                 RecloserReadingTypeKind_Amp,
                @value(7)                 RecloserReadingTypeKind_kVAa,
                @value(8)                 RecloserReadingTypeKind_kVAb,
                @value(9)                 RecloserReadingTypeKind_kVAc,
                @value(10)                 RecloserReadingTypeKind_kVA,
                @value(11)                 RecloserReadingTypeKind_kWa,
                @value(12)                 RecloserReadingTypeKind_kWb,
                @value(13)                 RecloserReadingTypeKind_kWc,
                @value(14)                 RecloserReadingTypeKind_kW,
                @value(15)                 RecloserReadingTypeKind_Va,
                @value(0)                 RecloserReadingTypeKind_none,
                @value(16)                 RecloserReadingTypeKind_Vb,
                @value(17)                 RecloserReadingTypeKind_Vc,
                @value(18)                 RecloserReadingTypeKind_Vab,
                @value(19)                 RecloserReadingTypeKind_Vbc,
                @value(20)                 RecloserReadingTypeKind_Vca,
                @value(21)                 RecloserReadingTypeKind_PAa,
                @value(22)                 RecloserReadingTypeKind_PAb,
                @value(23)                 RecloserReadingTypeKind_PAc,
                @value(24)                 RecloserReadingTypeKind_kVARa,
                @value(25)                 RecloserReadingTypeKind_kVARb,
                @value(26)                 RecloserReadingTypeKind_kVARc,
                @value(27)                 RecloserReadingTypeKind_kVAR,
                @value(1)                 RecloserReadingTypeKind_other
            };
            enum RegulatorEventKind {
                @value(3)                 RegulatorEventKind_tapped,
                @value(2)                 RegulatorEventKind_preTapWarning,
                @value(0)                 RegulatorEventKind_none,
                @value(1)                 RegulatorEventKind_other
            };
            enum RegulatorReadingTypeKind {
                @value(2)                 RegulatorReadingTypeKind_Hz,
                @value(3)                 RegulatorReadingTypeKind_Ia,
                @value(4)                 RegulatorReadingTypeKind_Ib,
                @value(5)                 RegulatorReadingTypeKind_Ic,
                @value(6)                 RegulatorReadingTypeKind_Amp,
                @value(7)                 RegulatorReadingTypeKind_kVAa,
                @value(8)                 RegulatorReadingTypeKind_kVAb,
                @value(9)                 RegulatorReadingTypeKind_kVAc,
                @value(10)                 RegulatorReadingTypeKind_kVA,
                @value(11)                 RegulatorReadingTypeKind_kWa,
                @value(12)                 RegulatorReadingTypeKind_kWb,
                @value(13)                 RegulatorReadingTypeKind_kWc,
                @value(14)                 RegulatorReadingTypeKind_kW,
                @value(15)                 RegulatorReadingTypeKind_Va,
                @value(0)                 RegulatorReadingTypeKind_none,
                @value(16)                 RegulatorReadingTypeKind_Vb,
                @value(17)                 RegulatorReadingTypeKind_Vc,
                @value(18)                 RegulatorReadingTypeKind_Vab,
                @value(19)                 RegulatorReadingTypeKind_Vbc,
                @value(20)                 RegulatorReadingTypeKind_Vca,
                @value(21)                 RegulatorReadingTypeKind_PAa,
                @value(22)                 RegulatorReadingTypeKind_PAb,
                @value(23)                 RegulatorReadingTypeKind_PAc,
                @value(25)                 RegulatorReadingTypeKind_kVARa,
                @value(26)                 RegulatorReadingTypeKind_kVARb,
                @value(27)                 RegulatorReadingTypeKind_kVARc,
                @value(24)                 RegulatorReadingTypeKind_kVAR,
                @value(1)                 RegulatorReadingTypeKind_other
            };
            enum ResourceReadingTypeKind {
                @value(2)                 ResourceReadingTypeKind_Hz,
                @value(3)                 ResourceReadingTypeKind_Ia,
                @value(4)                 ResourceReadingTypeKind_Ib,
                @value(5)                 ResourceReadingTypeKind_Ic,
                @value(6)                 ResourceReadingTypeKind_Amp,
                @value(7)                 ResourceReadingTypeKind_kVAa,
                @value(8)                 ResourceReadingTypeKind_kVAb,
                @value(9)                 ResourceReadingTypeKind_kVAc,
                @value(10)                 ResourceReadingTypeKind_kVA,
                @value(11)                 ResourceReadingTypeKind_kWa,
                @value(12)                 ResourceReadingTypeKind_kWb,
                @value(13)                 ResourceReadingTypeKind_kWc,
                @value(14)                 ResourceReadingTypeKind_kW,
                @value(15)                 ResourceReadingTypeKind_Va,
                @value(0)                 ResourceReadingTypeKind_none,
                @value(16)                 ResourceReadingTypeKind_Vb,
                @value(17)                 ResourceReadingTypeKind_Vc,
                @value(18)                 ResourceReadingTypeKind_Vab,
                @value(19)                 ResourceReadingTypeKind_Vbc,
                @value(20)                 ResourceReadingTypeKind_Vca,
                @value(21)                 ResourceReadingTypeKind_PAa,
                @value(22)                 ResourceReadingTypeKind_PAb,
                @value(23)                 ResourceReadingTypeKind_PAc,
                @value(24)                 ResourceReadingTypeKind_kVARa,
                @value(25)                 ResourceReadingTypeKind_kVARb,
                @value(26)                 ResourceReadingTypeKind_kVARc,
                @value(27)                 ResourceReadingTypeKind_kVAR,
                @value(1)                 ResourceReadingTypeKind_other
            };
            enum ScheduleTypeKind {
                @value(6)                 ScheduleTypeKind_ess,
                @value(2)                 ScheduleTypeKind_solar,
                @value(0)                 ScheduleTypeKind_none,
                @value(3)                 ScheduleTypeKind_load,
                @value(4)                 ScheduleTypeKind_voltageRegulator,
                @value(5)                 ScheduleTypeKind_motorOperatedSwitch,
                @value(1)                 ScheduleTypeKind_other
            };
            enum ShuntControlKind {
                @value(2)                 ShuntControlKind_powerRequest,
                @value(0)                 ShuntControlKind_none,
                @value(1)                 ShuntControlKind_other
            };
            enum ShuntReadingTypeKind {
                @value(2)                 ShuntReadingTypeKind_Hz,
                @value(3)                 ShuntReadingTypeKind_Ia,
                @value(4)                 ShuntReadingTypeKind_Ib,
                @value(5)                 ShuntReadingTypeKind_Ic,
                @value(6)                 ShuntReadingTypeKind_Amp,
                @value(7)                 ShuntReadingTypeKind_kVAa,
                @value(8)                 ShuntReadingTypeKind_kVAb,
                @value(9)                 ShuntReadingTypeKind_kVAc,
                @value(10)                 ShuntReadingTypeKind_kVA,
                @value(11)                 ShuntReadingTypeKind_kWa,
                @value(12)                 ShuntReadingTypeKind_kWb,
                @value(13)                 ShuntReadingTypeKind_kWc,
                @value(14)                 ShuntReadingTypeKind_kW,
                @value(15)                 ShuntReadingTypeKind_Va,
                @value(0)                 ShuntReadingTypeKind_none,
                @value(16)                 ShuntReadingTypeKind_Vb,
                @value(17)                 ShuntReadingTypeKind_Vc,
                @value(18)                 ShuntReadingTypeKind_Vab,
                @value(19)                 ShuntReadingTypeKind_Vbc,
                @value(20)                 ShuntReadingTypeKind_Vca,
                @value(21)                 ShuntReadingTypeKind_PAa,
                @value(22)                 ShuntReadingTypeKind_PAb,
                @value(23)                 ShuntReadingTypeKind_PAc,
                @value(24)                 ShuntReadingTypeKind_kVARa,
                @value(25)                 ShuntReadingTypeKind_kVARb,
                @value(26)                 ShuntReadingTypeKind_kVARc,
                @value(27)                 ShuntReadingTypeKind_kVAR,
                @value(1)                 ShuntReadingTypeKind_other
            };
            enum SolarControlKind {
                @value(3)                 SolarControlKind_connect,
                @value(2)                 SolarControlKind_disconnect,
                @value(0)                 SolarControlKind_none,
                @value(4)                 SolarControlKind_powerRequest,
                @value(1)                 SolarControlKind_other
            };
            enum SolarEventKind {
                @value(5)                 SolarEventKind_generatingAndConnected,
                @value(2)                 SolarEventKind_generatingAndAvailableForConnection,
                @value(0)                 SolarEventKind_none,
                @value(3)                 SolarEventKind_offButAvailableForGenerating,
                @value(4)                 SolarEventKind_offAndNotAvailableForGenerating,
                @value(1)                 SolarEventKind_other
            };
            enum SolarReadingTypeKind {
                @value(2)                 SolarReadingTypeKind_Hz,
                @value(3)                 SolarReadingTypeKind_Ia,
                @value(4)                 SolarReadingTypeKind_Ib,
                @value(5)                 SolarReadingTypeKind_Ic,
                @value(6)                 SolarReadingTypeKind_Amp,
                @value(7)                 SolarReadingTypeKind_kVAa,
                @value(8)                 SolarReadingTypeKind_kVAb,
                @value(9)                 SolarReadingTypeKind_kVAc,
                @value(10)                 SolarReadingTypeKind_kVA,
                @value(11)                 SolarReadingTypeKind_kWa,
                @value(12)                 SolarReadingTypeKind_kWb,
                @value(13)                 SolarReadingTypeKind_kWc,
                @value(14)                 SolarReadingTypeKind_kW,
                @value(15)                 SolarReadingTypeKind_Va,
                @value(0)                 SolarReadingTypeKind_none,
                @value(16)                 SolarReadingTypeKind_Vb,
                @value(17)                 SolarReadingTypeKind_Vc,
                @value(18)                 SolarReadingTypeKind_Vab,
                @value(19)                 SolarReadingTypeKind_Vbc,
                @value(20)                 SolarReadingTypeKind_Vca,
                @value(21)                 SolarReadingTypeKind_PAa,
                @value(22)                 SolarReadingTypeKind_PAb,
                @value(23)                 SolarReadingTypeKind_PAc,
                @value(24)                 SolarReadingTypeKind_kVARa,
                @value(25)                 SolarReadingTypeKind_kVARb,
                @value(26)                 SolarReadingTypeKind_kVARc,
                @value(27)                 SolarReadingTypeKind_kVAR,
                @value(1)                 SolarReadingTypeKind_other
            };
            enum SwitchEventKind {
                @value(3)                 SwitchEventKind_closed,
                @value(2)                 SwitchEventKind_open,
                @value(0)                 SwitchEventKind_none,
                @value(1)                 SwitchEventKind_other
            };
            enum UnitMultiplierKind {
                @value(2)                 UnitMultiplierKind_centi,
                @value(3)                 UnitMultiplierKind_deci,
                @value(4)                 UnitMultiplierKind_Giga,
                @value(5)                 UnitMultiplierKind_kilo,
                @value(8)                 UnitMultiplierKind_milli,
                @value(6)                 UnitMultiplierKind_Mega,
                @value(7)                 UnitMultiplierKind_micro,
                @value(9)                 UnitMultiplierKind_nano,
                @value(0)                 UnitMultiplierKind_none,
                @value(10)                 UnitMultiplierKind_pico,
                @value(11)                 UnitMultiplierKind_Tera,
                @value(1)                 UnitMultiplierKind_other
            };
            enum UnitSymbolKind {
                @value(5)                 UnitSymbolKind_Amp,
                @value(9)                 UnitSymbolKind_deg,
                @value(23)                 UnitSymbolKind_degC,
                @value(279)                 UnitSymbolKind_degF,
                @value(25)                 UnitSymbolKind_Farad,
                @value(3)                 UnitSymbolKind_gram,
                @value(160)                 UnitSymbolKind_hour,
                @value(28)                 UnitSymbolKind_Henry,
                @value(33)                 UnitSymbolKind_Hz,
                @value(31)                 UnitSymbolKind_Joule,
                @value(2)                 UnitSymbolKind_meter,
                @value(41)                 UnitSymbolKind_m2,
                @value(166)                 UnitSymbolKind_m3,
                @value(159)                 UnitSymbolKind_min,
                @value(500)                 UnitSymbolKind_mph,
                @value(32)                 UnitSymbolKind_Newton,
                @value(0)                 UnitSymbolKind_none,
                @value(30)                 UnitSymbolKind_ohm,
                @value(39)                 UnitSymbolKind_Pa,
                @value(10)                 UnitSymbolKind_rad,
                @value(53)                 UnitSymbolKind_Siemens,
                @value(27)                 UnitSymbolKind_sec,
                @value(29)                 UnitSymbolKind_V,
                @value(61)                 UnitSymbolKind_VA,
                @value(71)                 UnitSymbolKind_VAh,
                @value(63)                 UnitSymbolKind_VAr,
                @value(73)                 UnitSymbolKind_VArh,
                @value(38)                 UnitSymbolKind_W,
                @value(72)                 UnitSymbolKind_Wh,
                @value(65)                 UnitSymbolKind_wPerVA,
                @value(179)                 UnitSymbolKind_wPerM2,
                @value(75)                 UnitSymbolKind_hzPerS,
                @value(81)                 UnitSymbolKind_wPerS,
                @value(100)                 UnitSymbolKind_other
            };
        }; /* module commonmodule */

        module essmodule {
            struct ESSControlProfile;
            struct ESSControlScheduleProfile;
            struct ESSStatusProfile;
            struct ESSEventProfile;
            struct ESSReadingProfile;
        }; /* module essmodule */

        module generationmodule {
            struct GenerationControlScheduleProfile;
            struct GenerationControlProfile;
            struct GenerationForecastProfile;
            struct GenerationReadingProfile;
            struct GenerationEventProfile;
            struct GenerationStatusProfile;
        }; /* module generationmodule */

        module interchangemodule {
            struct InterchangeScheduleProfile;
        }; /* module interchangemodule */

        module interconnectionmodule {
            struct PlannedInterconnectionScheduleProfile;
            struct RequestedInterconnectionScheduleProfile;
        }; /* module interconnectionmodule */

        module loadmodule {
            struct LoadControlScheduleProfile;
            struct LoadControlProfile;
            struct LoadForecastProfile;
            struct LoadReadingProfile;
            struct LoadStatusProfile;
        }; /* module loadmodule */

        module motoroperatedswitchmodule {
            struct MotorOperatedSwitchControlProfile;
            struct MotorOperatedSwitchControlScheduleProfile;
            struct MotorOperatedSwitchEventProfile;
            struct MotorOperatedSwitchReadingProfile;
            struct MotorOperatedSwitchStatusProfile;
        }; /* module motoroperatedswitchmodule */

        module optimizermodule {
            struct ESSControlScheduleProfileList;
            struct LoadControlScheduleProfileList;
            struct PlannedInterconnectionScheduleProfileList;
            struct PlannedOptimizerScheduleProfile;
            struct RegulatorControlScheduleProfileList;
            struct RequestedInterconnectionScheduleProfileList;
            struct SolarControlScheduleProfileList;
            struct RequestedOptimizerScheduleProfile;
        }; /* module optimizermodule */

        module reclosermodule {
            struct RecloserControlProfile;
            struct RecloserEventProfile;
            struct RecloserReadingProfile;
            struct RecloserStatusProfile;
        }; /* module reclosermodule */

        module regulatormodule {
            struct RegulatorControlScheduleProfile;
            struct RegulatorStatusProfile;
            struct RegulatorEventProfile;
            struct RegulatorReadingProfile;
        }; /* module regulatormodule */

        module resourcemodule {
            struct ResourceReadingProfile;
            struct ResourceStatusProfile;
        }; /* module resourcemodule */

        module securitymodule {
            struct SecurityEventProfile;
        }; /* module securitymodule */

        module shuntmodule {
            struct ShuntControlScheduleProfile;
            struct ShuntControlProfile;
            struct ShuntStatusProfile;
            struct ShuntReadingProfile;
        }; /* module shuntmodule */

        module solarmodule {
            struct SolarControlScheduleProfile;
            struct SolarCapabilityProfile;
            struct SolarControlProfile;
            struct SolarForecastProfile;
            struct SolarEventProfile;
            struct SolarReadingProfile;
            struct SolarStatusProfile;
        }; /* module solarmodule */

        module weathermodule {
            struct WeatherDataProfile;
        }; /* module weathermodule */

    }; /* module openfmb */

}; /* module OpenFMB_Information_Model */

module OpenFMB_Information_Model {
    module openfmb {
        module commonmodule {
            @nested(TRUE) 
            struct ActivePower {
                @optional                float value;
                @optional                OpenFMB_Information_Model::openfmb::commonmodule::UnitSymbolKind unit;
                @optional                OpenFMB_Information_Model::openfmb::commonmodule::UnitMultiplierKind multiplier;
            };
            @nested(TRUE) 
            struct BasicIntervalSchedule {
                @optional                UML_Extension::dateTime startTime;
                @optional                OpenFMB_Information_Model::openfmb::commonmodule::UnitMultiplierKind value1Multiplier;
                @optional                OpenFMB_Information_Model::openfmb::commonmodule::UnitSymbolKind value1Unit;
                @optional                OpenFMB_Information_Model::openfmb::commonmodule::UnitMultiplierKind value2Multiplier;
                @optional                OpenFMB_Information_Model::openfmb::commonmodule::UnitSymbolKind value2Unit;
            };
            @nested(TRUE) 
            struct Container {
                @key                string logicalDeviceID;
                UML_Extension::dateTime timestamp;
            };
            @nested(TRUE) 
            struct CurveData {
                @optional                float xvalue;
                @optional                float yvalue;
            };
            @nested(TRUE) 
            struct CurveDataList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::CurveData>  curveData;
            };
            @nested(TRUE) 
            struct DateTimeInterval {
                @optional                UML_Extension::dateTime end;
                @optional                UML_Extension::dateTime start;
            };
            @nested(TRUE) 
            struct HumidityData {
                @optional                UML_Extension::dateTime timestamp;
                @optional                float value;
            };
            @nested(TRUE) 
            struct HumidityDataList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::HumidityData>  humidityData;
            };
            @nested(TRUE) 
            struct IrregularTimePoint {
                @optional                float value1;
                @optional                float value2;
            };
            @nested(TRUE) 
            struct IrregularTimePointList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::IrregularTimePoint>  irregularTimePoint;
            };
            @nested(TRUE) 
            struct MarketFactors {
                @optional                UML_Extension::dateTime intervalEndTime;
                @optional                UML_Extension::dateTime intervalStartTime;
            };
            @nested(TRUE) 
            struct MarketRun {
                @optional                OpenFMB_Information_Model::openfmb::commonmodule::ExecutionKind executionType;
                @optional                UML_Extension::dateTime marketEndTime;
                @optional                string marketID;
                @optional                string marketRunID;
                @optional                UML_Extension::dateTime marketStartTime;
                @optional                OpenFMB_Information_Model::openfmb::commonmodule::MarketKind marketType;
                @optional                string marketTypeExtension;
                @optional                string executionTypeExtension;
            };
            @nested(TRUE) 
            struct MarketRunList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::MarketRun>  marketRun;
            };
            @nested(TRUE) 
            struct MotorOperatedSwitchEvent {
                @optional                OpenFMB_Information_Model::openfmb::commonmodule::HexBinary16 qualityFlag;
                @optional                UML_Extension::dateTime timestamp;
                OpenFMB_Information_Model::openfmb::commonmodule::SwitchEventKind type;
                @optional                string typeExtension;
            };
            @nested(TRUE) 
            struct Reading {
                @optional                OpenFMB_Information_Model::openfmb::commonmodule::HexBinary16 qualityFlag;
                @optional                OpenFMB_Information_Model::openfmb::commonmodule::DateTimeInterval timePeriod;
                float value;
            };
            @nested(TRUE) 
            struct RecloserEvent {
                @optional                boolean isBlocked;
                OpenFMB_Information_Model::openfmb::commonmodule::SwitchEventKind type;
                @optional                boolean normalOpen;
                @optional                OpenFMB_Information_Model::openfmb::commonmodule::HexBinary16 qualityFlag;
                @optional                UML_Extension::dateTime timestamp;
                @optional                string typeExtension;
            };
            @nested(TRUE) 
            struct RecloserReading : OpenFMB_Information_Model::openfmb::commonmodule::Reading {
                @optional                string typeExtension;
                @optional                string terminalID;
                OpenFMB_Information_Model::openfmb::commonmodule::RecloserReadingTypeKind type;
            };
            @nested(TRUE) 
            struct RecloserReadingList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::RecloserReading>  recloserReading;
            };
            @nested(TRUE) 
            struct RegulatorEvent {
                @optional                OpenFMB_Information_Model::openfmb::commonmodule::HexBinary16 qualityFlag;
                @optional                UML_Extension::dateTime timestamp;
                OpenFMB_Information_Model::openfmb::commonmodule::RegulatorEventKind type;
                @optional                string typeExtension;
            };
            @nested(TRUE) 
            struct RegulatorReading : OpenFMB_Information_Model::openfmb::commonmodule::Reading {
                @optional                string typeExtension;
                OpenFMB_Information_Model::openfmb::commonmodule::RegulatorReadingTypeKind type;
            };
            @nested(TRUE) 
            struct RegulatorReadingList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::RegulatorReading>  regulatorReading;
            };
            @nested(TRUE) 
            struct ResourceReading : OpenFMB_Information_Model::openfmb::commonmodule::Reading {
                @optional                string typeExtension;
                OpenFMB_Information_Model::openfmb::commonmodule::ResourceReadingTypeKind type;
            };
            @nested(TRUE) 
            struct ResourceReadingList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::ResourceReading>  resourceReading;
            };
            @nested(TRUE) 
            struct SetPoint {
                @optional                OpenFMB_Information_Model::openfmb::commonmodule::UnitMultiplierKind multiplier;
                @optional                OpenFMB_Information_Model::openfmb::commonmodule::UnitSymbolKind unit;
                @optional                string name;
                @optional                float value;
            };
            @nested(TRUE) 
            struct SetPointList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::SetPoint>  setPoint;
            };
            @nested(TRUE) 
            struct ShuntControl {
                @optional                string issueID;
                @optional                string name;
                @optional                OpenFMB_Information_Model::openfmb::commonmodule::DateTimeInterval scheduledInterval;
                OpenFMB_Information_Model::openfmb::commonmodule::ShuntControlKind type;
                @optional                string typeExtension;
                @Optional OpenFMB_Information_Model::openfmb::commonmodule::SetPointList  setPointList; 
            };
            @nested(TRUE) 
            struct ShuntReading : OpenFMB_Information_Model::openfmb::commonmodule::Reading {
                @optional                string typeExtension;
                OpenFMB_Information_Model::openfmb::commonmodule::ShuntReadingTypeKind type;
            };
            @nested(TRUE) 
            struct ShuntReadingList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::ShuntReading>  shuntReading;
            };
            @nested(TRUE) 
            struct SolarCapability {
                @optional                float ahrRtg;
                @optional                string qualityFlag;
                @optional                UML_Extension::dateTime timestamp;
                @optional                float voltage;
                @optional                float wRtgMaxVal;
                @optional                float wRtgMinVal;
            };
            @nested(TRUE) 
            struct SolarControl {
                @optional                boolean isIslanded;
                @optional                string issueID;
                @optional                OpenFMB_Information_Model::openfmb::commonmodule::DateTimeInterval scheduledInterval;
                OpenFMB_Information_Model::openfmb::commonmodule::SolarControlKind type;
                @optional                string typeExtension;
                @Optional OpenFMB_Information_Model::openfmb::commonmodule::SetPointList  setPointList; 
            };
            @nested(TRUE) 
            struct SolarInverterEvent {
                @optional                boolean isConnected;
                OpenFMB_Information_Model::openfmb::commonmodule::SolarEventKind type;
                @optional                UML_Extension::dateTime timestamp;
                @optional                OpenFMB_Information_Model::openfmb::commonmodule::HexBinary16 qualityFlag;
                @optional                string typeExtension;
            };
            @nested(TRUE) 
            struct SolarReading : OpenFMB_Information_Model::openfmb::commonmodule::Reading {
                @optional                string typeExtension;
                OpenFMB_Information_Model::openfmb::commonmodule::SolarReadingTypeKind type;
            };
            @nested(TRUE) 
            struct SolarReadingList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::SolarReading>  solarReading;
            };
            @nested(TRUE) 
            struct StringMeasurementValue {
                @optional                OpenFMB_Information_Model::openfmb::commonmodule::HexBinary16 qualityFlag;
                @optional                string source;
                @optional                UML_Extension::dateTime timeStamp;
                string value;
            };
            @nested(TRUE) 
            struct SunRadiationData {
                @optional                UML_Extension::dateTime timestamp;
                @optional                float value;
            };
            @nested(TRUE) 
            struct SunRadiationDataList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::SunRadiationData>  sunRadiationData;
            };
            @nested(TRUE) 
            struct TemperatureData {
                @optional                UML_Extension::dateTime timestamp;
                @optional                float value;
            };
            @nested(TRUE) 
            struct TemperatureDataList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::TemperatureData>  temperatureData;
            };
            @nested(TRUE) 
            struct WindData {
                @optional                UML_Extension::dateTime timestamp;
                @optional                float windDirection;
                @optional                float windSpeed;
            };
            @nested(TRUE) 
            struct WindDataList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::WindData>  windData;
            };
        }; /* module commonmodule */

    }; /* module openfmb */

}; /* module OpenFMB_Information_Model */

module OpenFMB_Information_Model {
    module openfmb {
        module commonmodule {
            @nested(TRUE) 
            struct AnalogValue {
                @optional                OpenFMB_Information_Model::openfmb::commonmodule::HexBinary16 qualityFlag;
                @optional                string source;
                @optional                UML_Extension::dateTime timeStamp;
                float value;
            };
            @nested(TRUE) 
            struct BooleanMeasurementValue {
                @optional                OpenFMB_Information_Model::openfmb::commonmodule::HexBinary16 qualityFlag;
                @optional                string source;
                @optional                UML_Extension::dateTime timeStamp;
                boolean value;
            };
            @nested(TRUE) 
            struct BreakerEvent {
                @optional                boolean isBlocked;
                OpenFMB_Information_Model::openfmb::commonmodule::SwitchEventKind type;
                @optional                boolean normalOpen;
                @optional                UML_Extension::dateTime timestamp;
                @optional                OpenFMB_Information_Model::openfmb::commonmodule::HexBinary16 qualityFlag;
                @optional                string typeExtension;
            };
            @nested(TRUE) 
            struct BreakerReading : OpenFMB_Information_Model::openfmb::commonmodule::Reading {
                @optional                string terminalID;
                OpenFMB_Information_Model::openfmb::commonmodule::BreakerReadingTypeKind type;
                @optional                string typeExtension;
            };
            @nested(TRUE) 
            struct BreakerReadingList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::BreakerReading>  breakerReading;
            };
            @nested(TRUE) 
            struct Curve {
                @optional                OpenFMB_Information_Model::openfmb::commonmodule::CurveStyleKind curveStyle;
                @optional                OpenFMB_Information_Model::openfmb::commonmodule::UnitMultiplierKind xMultiplier;
                @optional                OpenFMB_Information_Model::openfmb::commonmodule::UnitSymbolKind xUnit;
                @optional                OpenFMB_Information_Model::openfmb::commonmodule::UnitMultiplierKind yMultiplier;
                @optional                OpenFMB_Information_Model::openfmb::commonmodule::UnitSymbolKind yUnit;
                @optional                OpenFMB_Information_Model::openfmb::commonmodule::CurveNameKind name;
                OpenFMB_Information_Model::openfmb::commonmodule::CurveDataList  curveDataList;
            };
            @nested(TRUE) 
            struct DiscreteValue {
                @optional                OpenFMB_Information_Model::openfmb::commonmodule::HexBinary16 qualityFlag;
                @optional                string source;
                @optional                UML_Extension::dateTime timeStamp;
                long value;
            };
            @nested(TRUE) 
            struct ESSControl {
                @optional                string issueID;
                @optional                OpenFMB_Information_Model::openfmb::commonmodule::DateTimeInterval scheduledInterval;
                @optional                OpenFMB_Information_Model::openfmb::commonmodule::InverterModeKind inverterMode;
                OpenFMB_Information_Model::openfmb::commonmodule::ESSControlKind type;
                @optional                string typeExtension;
                @optional                string inverterModeExtension;
                @Optional OpenFMB_Information_Model::openfmb::commonmodule::SetPointList  setPointList; 
            };
            @nested(TRUE) 
            struct ESSControlSchedule : OpenFMB_Information_Model::openfmb::commonmodule::Curve {
                @optional                OpenFMB_Information_Model::openfmb::commonmodule::InverterModeKind inverterMode;
                @optional                OpenFMB_Information_Model::openfmb::commonmodule::DateTimeInterval dateTimeInterval;
                @optional                string inverterModeExtension;
            };
            @nested(TRUE) 
            struct ESSControlScheduleList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::ESSControlSchedule>  essControlSchedule;
            };
            @nested(TRUE) 
            struct ESSEvent {
                @optional                boolean isConnected;
                OpenFMB_Information_Model::openfmb::commonmodule::ESSEventKind type;
                @optional                float stateOfCharge;
                @optional                OpenFMB_Information_Model::openfmb::commonmodule::HexBinary16 qualityFlag;
                @optional                UML_Extension::dateTime timestamp;
                @optional                string typeExtension;
            };
            @nested(TRUE) 
            struct ESSReading : OpenFMB_Information_Model::openfmb::commonmodule::Reading {
                @optional                string typeExtension;
                OpenFMB_Information_Model::openfmb::commonmodule::ESSReadingTypeKind type;
            };
            @nested(TRUE) 
            struct ESSReadingList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::ESSReading>  essReading;
            };
            @nested(TRUE) 
            struct ForecastSchedule : OpenFMB_Information_Model::openfmb::commonmodule::BasicIntervalSchedule {
                @optional                string version;
                @optional                UML_Extension::dateTime versionDateTime;
                @Optional OpenFMB_Information_Model::openfmb::commonmodule::IrregularTimePointList  irregularTimePointList; 
            };
            @nested(TRUE) 
            struct GenerationControl {
                @optional                string issueID;
                @optional                string name;
                @optional                OpenFMB_Information_Model::openfmb::commonmodule::DateTimeInterval scheduledInterval;
                OpenFMB_Information_Model::openfmb::commonmodule::GenerationControlKind type;
                @optional                string typeExtension;
                @Optional OpenFMB_Information_Model::openfmb::commonmodule::SetPointList  setPointList; 
            };
            @nested(TRUE) 
            struct GenerationControlSchedule : OpenFMB_Information_Model::openfmb::commonmodule::Curve {
                @optional                OpenFMB_Information_Model::openfmb::commonmodule::DateTimeInterval dateTimeInterval;
            };
            @nested(TRUE) 
            struct GenerationControlScheduleList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::GenerationControlSchedule>  generationControlSchedule;
            };
            @nested(TRUE) 
            struct GenerationEvent {
                @optional                boolean isAutoOn;
                @optional                boolean isConnected;
                OpenFMB_Information_Model::openfmb::commonmodule::GenerationEventKind type;
                @optional                OpenFMB_Information_Model::openfmb::commonmodule::HexBinary16 qualityFlag;
                @optional                UML_Extension::dateTime timestamp;
                @optional                string typeExtension;
            };
            @nested(TRUE) 
            struct GenerationReading : OpenFMB_Information_Model::openfmb::commonmodule::Reading {
                @optional                string typeExtension;
                OpenFMB_Information_Model::openfmb::commonmodule::GenerationReadingTypeKind type;
            };
            @nested(TRUE) 
            struct GenerationReadingList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::GenerationReading>  generationReading;
            };
            @nested(TRUE) 
            struct Humidity {
                @optional                OpenFMB_Information_Model::openfmb::commonmodule::UnitSymbolKind unit;
                @Optional OpenFMB_Information_Model::openfmb::commonmodule::HumidityDataList  humidityDataList; 
            };
            @nested(TRUE) 
            struct IdentifiedObject {
                @optional                OpenFMB_Information_Model::openfmb::commonmodule::uuidType mRID;
                @optional                string description;
                @optional                string name;
            };
            @nested(TRUE) 
            struct InterconnectionPoint : OpenFMB_Information_Model::openfmb::commonmodule::IdentifiedObject {
                octet __dummy_prevent_empty_class_InterconnectionPoint;
            };
            @nested(TRUE) 
            struct InterconnectionSchedule : OpenFMB_Information_Model::openfmb::commonmodule::Curve {
                @optional                OpenFMB_Information_Model::openfmb::commonmodule::InverterModeKind inverterMode;
                OpenFMB_Information_Model::openfmb::commonmodule::ScheduleTypeKind type;
                @optional                OpenFMB_Information_Model::openfmb::commonmodule::DateTimeInterval dateTimeInterval;
                @optional                string typeExtension;
                @optional                string inverterModeExtension;
            };
            @nested(TRUE) 
            struct InterconnectionScheduleList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::InterconnectionSchedule>  interconnectionSchedule;
            };
            @nested(TRUE) 
            struct LoadControl {
                @optional                string issueID;
                @optional                string name;
                @optional                OpenFMB_Information_Model::openfmb::commonmodule::DateTimeInterval scheduledInterval;
                OpenFMB_Information_Model::openfmb::commonmodule::LoadControlKind type;
                @optional                string typeExtension;
                @Optional OpenFMB_Information_Model::openfmb::commonmodule::SetPointList  setPointList; 
            };
            @nested(TRUE) 
            struct LoadControlSchedule : OpenFMB_Information_Model::openfmb::commonmodule::Curve {
                @optional                OpenFMB_Information_Model::openfmb::commonmodule::DateTimeInterval dateTimeInterval;
            };
            @nested(TRUE) 
            struct LoadControlScheduleList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::LoadControlSchedule>  loadControlSchedule;
            };
            @nested(TRUE) 
            struct LoadReading : OpenFMB_Information_Model::openfmb::commonmodule::Reading {
                @optional                string typeExtension;
                OpenFMB_Information_Model::openfmb::commonmodule::LoadReadingTypeKind type;
            };
            @nested(TRUE) 
            struct LoadReadingList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::LoadReading>  loadReading;
            };
            @nested(TRUE) 
            struct MarketFactorList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::MarketFactors>  marketFactor;
            };
            @nested(TRUE) 
            struct MotorOperatedSwitch : OpenFMB_Information_Model::openfmb::commonmodule::IdentifiedObject {
                octet __dummy_prevent_empty_class_MotorOperatedSwitch;
            };
            @nested(TRUE) 
            struct MotorOperatedSwitchControl {
                @optional                string name;
                OpenFMB_Information_Model::openfmb::commonmodule::MotorOperatedSwitchControlKind type;
                @optional                string issueID;
                @optional                OpenFMB_Information_Model::openfmb::commonmodule::DateTimeInterval scheduledInterval;
                @optional                string typeExtension;
                @Optional OpenFMB_Information_Model::openfmb::commonmodule::SetPointList  setPointList; 
            };
            @nested(TRUE) 
            struct MotorOperatedSwitchControlSchedule : OpenFMB_Information_Model::openfmb::commonmodule::Curve {
                @optional                OpenFMB_Information_Model::openfmb::commonmodule::DateTimeInterval dateTimeInterval;
            };
            @nested(TRUE) 
            struct MotorOperatedSwitchControlScheduleList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::MotorOperatedSwitchControlSchedule>  motorOperatedSwitchControlSchedule;
            };
            @nested(TRUE) 
            struct MotorOperatedSwitchReading : OpenFMB_Information_Model::openfmb::commonmodule::Reading {
                @optional                string typeExtension;
                @optional                string terminalID;
                OpenFMB_Information_Model::openfmb::commonmodule::MotorOperatedSwitchReadingTypeKind type;
            };
            @nested(TRUE) 
            struct MotorOperatedSwitchReadingList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::MotorOperatedSwitchReading>  motorOperatedSwitchReading;
            };
            @nested(TRUE) 
            struct PowerSystemResource : OpenFMB_Information_Model::openfmb::commonmodule::IdentifiedObject {
                octet __dummy_prevent_empty_class_PowerSystemResource;
            };
            @nested(TRUE) 
            struct Recloser : OpenFMB_Information_Model::openfmb::commonmodule::IdentifiedObject {
                @optional                boolean normalOpen;
            };
            @nested(TRUE) 
            struct RecloserControl {
                @optional                string name;
                OpenFMB_Information_Model::openfmb::commonmodule::RecloserControlKind type;
                @optional                string issueID;
                @optional                OpenFMB_Information_Model::openfmb::commonmodule::DateTimeInterval scheduledInterval;
                @optional                string typeExtension;
                @Optional OpenFMB_Information_Model::openfmb::commonmodule::SetPointList  setPointList; 
            };
            @nested(TRUE) 
            struct RegulatorControlSchedule : OpenFMB_Information_Model::openfmb::commonmodule::Curve {
                @optional                OpenFMB_Information_Model::openfmb::commonmodule::DateTimeInterval dateTimeInterval;
            };
            @nested(TRUE) 
            struct RegulatorControlScheduleList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::RegulatorControlSchedule>  regulatorControlSchedule;
            };
            @nested(TRUE) 
            struct RegulatorSystem : OpenFMB_Information_Model::openfmb::commonmodule::IdentifiedObject {
                octet __dummy_prevent_empty_class_RegulatorSystem;
            };
            @nested(TRUE) 
            struct ShuntControlSchedule : OpenFMB_Information_Model::openfmb::commonmodule::Curve {
                @optional                OpenFMB_Information_Model::openfmb::commonmodule::DateTimeInterval dateTimeInterval;
            };
            @nested(TRUE) 
            struct ShuntControlScheduleList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::ShuntControlSchedule>  shuntControlSchedule;
            };
            @nested(TRUE) 
            struct ShuntSystem : OpenFMB_Information_Model::openfmb::commonmodule::IdentifiedObject {
                octet __dummy_prevent_empty_class_ShuntSystem;
            };
            @nested(TRUE) 
            struct SolarControlSchedule : OpenFMB_Information_Model::openfmb::commonmodule::Curve {
                OpenFMB_Information_Model::openfmb::commonmodule::InverterModeKind inverterMode;
                @optional                OpenFMB_Information_Model::openfmb::commonmodule::DateTimeInterval dateTimeInterval;
                @optional                string inverterModeExtension;
            };
            @nested(TRUE) 
            struct SolarControlScheduleList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::SolarControlSchedule>  solarControlSchedule;
            };
            @nested(TRUE) 
            struct SolarInverter : OpenFMB_Information_Model::openfmb::commonmodule::IdentifiedObject {
                octet __dummy_prevent_empty_class_SolarInverter;
            };
            @nested(TRUE) 
            struct StringMeasurement {
                @optional                string mRID;
                @optional                string description;
                @optional                string measurementType;
                @optional                OpenFMB_Information_Model::openfmb::commonmodule::UnitMultiplierKind multiplier;
                @optional                string name;
                @optional                OpenFMB_Information_Model::openfmb::commonmodule::PhaseCodeKind phases;
                @optional                OpenFMB_Information_Model::openfmb::commonmodule::UnitSymbolKind unit;
                OpenFMB_Information_Model::openfmb::commonmodule::StringMeasurementValue  stringMeasurementValue;
            };
            @nested(TRUE) 
            struct StringMeasurementList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::StringMeasurement>  stringMeasurement;
            };
            @nested(TRUE) 
            struct SunRadiation {
                @optional                OpenFMB_Information_Model::openfmb::commonmodule::UnitMultiplierKind multiplier;
                @optional                OpenFMB_Information_Model::openfmb::commonmodule::UnitSymbolKind unit;
                @Optional OpenFMB_Information_Model::openfmb::commonmodule::SunRadiationDataList  sunRadiationDataList; 
            };
            @nested(TRUE) 
            struct Temperature {
                @optional                OpenFMB_Information_Model::openfmb::commonmodule::UnitSymbolKind unit;
                @Optional OpenFMB_Information_Model::openfmb::commonmodule::TemperatureDataList  temperatureDataList; 
            };
            @nested(TRUE) 
            struct Wind {
                @optional                OpenFMB_Information_Model::openfmb::commonmodule::UnitSymbolKind directionUnit;
                @optional                OpenFMB_Information_Model::openfmb::commonmodule::UnitSymbolKind speedUnit;
                @Optional OpenFMB_Information_Model::openfmb::commonmodule::WindDataList  windDataList; 
            };
        }; /* module commonmodule */

        module interconnectionmodule {
            @nested(FALSE) 
            struct PlannedInterconnectionScheduleProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::InterconnectionPoint  interconnectionPoint;
                OpenFMB_Information_Model::openfmb::commonmodule::InterconnectionScheduleList  interconnectionScheduleList;
            };
            @nested(FALSE) 
            struct RequestedInterconnectionScheduleProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::InterconnectionPoint  interconnectionPoint;
                OpenFMB_Information_Model::openfmb::commonmodule::InterconnectionScheduleList  interconnectionScheduleList;
            };
        }; /* module interconnectionmodule */

        module motoroperatedswitchmodule {
            @nested(FALSE) 
            struct MotorOperatedSwitchControlProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::MotorOperatedSwitch  motorOperatedSwitch;
                OpenFMB_Information_Model::openfmb::commonmodule::MotorOperatedSwitchControl  motorOperatedSwitchControl;
            };
            @nested(FALSE) 
            struct MotorOperatedSwitchControlScheduleProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::MotorOperatedSwitch  motorOperatedSwitch;
                OpenFMB_Information_Model::openfmb::commonmodule::MotorOperatedSwitchControlScheduleList  motorOperatedSwitchControlScheduleList;
            };
            @nested(FALSE) 
            struct MotorOperatedSwitchEventProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::MotorOperatedSwitch  motorOperatedSwitch;
                OpenFMB_Information_Model::openfmb::commonmodule::MotorOperatedSwitchEvent  motorOperatedSwitchEvent;
            };
            @nested(FALSE) 
            struct MotorOperatedSwitchReadingProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::MotorOperatedSwitchReadingList  motorOperatedSwitchReadingList;
                OpenFMB_Information_Model::openfmb::commonmodule::MotorOperatedSwitch  motorOperatedSwitch;
            };
        }; /* module motoroperatedswitchmodule */

        module optimizermodule {
            @nested(TRUE) 
            struct PlannedInterconnectionScheduleProfileList {
                sequence<OpenFMB_Information_Model::openfmb::interconnectionmodule::PlannedInterconnectionScheduleProfile>  plannedInterconnectionScheduleProfile;
            };
            @nested(TRUE) 
            struct RequestedInterconnectionScheduleProfileList {
                sequence<OpenFMB_Information_Model::openfmb::interconnectionmodule::RequestedInterconnectionScheduleProfile>  requestedInterconnectionScheduleProfile;
            };
        }; /* module optimizermodule */

        module reclosermodule {
            @nested(FALSE) 
            struct RecloserControlProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::Recloser  recloser;
                OpenFMB_Information_Model::openfmb::commonmodule::RecloserControl  recloserControl;
            };
            @nested(FALSE) 
            struct RecloserEventProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::Recloser  recloser;
                OpenFMB_Information_Model::openfmb::commonmodule::RecloserEvent  recloserEvent;
            };
            @nested(FALSE) 
            struct RecloserReadingProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::Recloser  recloser;
                OpenFMB_Information_Model::openfmb::commonmodule::RecloserReadingList  recloserReadingList;
            };
        }; /* module reclosermodule */

        module regulatormodule {
            @nested(FALSE) 
            struct RegulatorControlScheduleProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::RegulatorControlScheduleList  regulatorControlScheduleList;
                OpenFMB_Information_Model::openfmb::commonmodule::RegulatorSystem  regulatorSystem;
            };
            @nested(FALSE) 
            struct RegulatorEventProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::RegulatorEvent  regulatorEvent;
                OpenFMB_Information_Model::openfmb::commonmodule::RegulatorSystem  regulatorSystem;
            };
            @nested(FALSE) 
            struct RegulatorReadingProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::RegulatorSystem  regulatorSystem;
                OpenFMB_Information_Model::openfmb::commonmodule::RegulatorReadingList  regulatorReadingList;
            };
        }; /* module regulatormodule */

        module shuntmodule {
            @nested(FALSE) 
            struct ShuntControlScheduleProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::ShuntControlScheduleList  shuntControlScheduleList;
                OpenFMB_Information_Model::openfmb::commonmodule::ShuntSystem  shuntSystem;
            };
            @nested(FALSE) 
            struct ShuntControlProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::ShuntSystem  shuntSystem;
                OpenFMB_Information_Model::openfmb::commonmodule::ShuntControl  shuntControl;
            };
            @nested(FALSE) 
            struct ShuntReadingProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::ShuntSystem  shuntSystem;
                OpenFMB_Information_Model::openfmb::commonmodule::ShuntReadingList  shuntReadingList;
            };
        }; /* module shuntmodule */

        module solarmodule {
            @nested(FALSE) 
            struct SolarControlScheduleProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::SolarInverter  solarInverter;
                OpenFMB_Information_Model::openfmb::commonmodule::SolarControlScheduleList  solarControlScheduleList;
            };
            @nested(FALSE) 
            struct SolarCapabilityProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::SolarCapability  solarCapability;
                OpenFMB_Information_Model::openfmb::commonmodule::SolarInverter  solarInverter;
            };
            @nested(FALSE) 
            struct SolarControlProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::SolarInverter  solarInverter;
                OpenFMB_Information_Model::openfmb::commonmodule::SolarControl  solarControl;
            };
            @nested(FALSE) 
            struct SolarForecastProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::SolarInverter  solarInverter;
                OpenFMB_Information_Model::openfmb::commonmodule::ForecastSchedule  forecastSchedule;
            };
            @nested(FALSE) 
            struct SolarEventProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::SolarInverter  solarInverter;
                OpenFMB_Information_Model::openfmb::commonmodule::SolarInverterEvent  solarInverterEvent;
            };
            @nested(FALSE) 
            struct SolarReadingProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::SolarInverter  solarInverter;
                OpenFMB_Information_Model::openfmb::commonmodule::SolarReadingList  solarReadingList;
            };
        }; /* module solarmodule */

    }; /* module openfmb */

}; /* module OpenFMB_Information_Model */

module OpenFMB_Information_Model {
    module openfmb {
        module commonmodule {
            @nested(TRUE) 
            struct Analog {
                @optional                string mRID;
                @optional                string description;
                @optional                string measurementType;
                @optional                OpenFMB_Information_Model::openfmb::commonmodule::UnitMultiplierKind multiplier;
                @optional                string name;
                @optional                OpenFMB_Information_Model::openfmb::commonmodule::PhaseCodeKind phases;
                @optional                OpenFMB_Information_Model::openfmb::commonmodule::UnitSymbolKind unit;
                OpenFMB_Information_Model::openfmb::commonmodule::AnalogValue  analogMeasurementValue;
            };
            @nested(TRUE) 
            struct AnalogMeasurementList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::Analog>  analogMeasurement;
            };
            @nested(TRUE) 
            struct BooleanMeasurement {
                @optional                string mRID;
                @optional                string description;
                @optional                string measurementType;
                @optional                string name;
                @optional                OpenFMB_Information_Model::openfmb::commonmodule::PhaseCodeKind phases;
                OpenFMB_Information_Model::openfmb::commonmodule::BooleanMeasurementValue  booleanMeasurementValue;
            };
            @nested(TRUE) 
            struct BooleanMeasurementList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::BooleanMeasurement>  booleanMeasurement;
            };
            @nested(TRUE) 
            struct Breaker : OpenFMB_Information_Model::openfmb::commonmodule::IdentifiedObject {
                octet __dummy_prevent_empty_class_Breaker;
            };
            @nested(TRUE) 
            struct Discrete {
                @optional                string mRID;
                @optional                string description;
                @optional                string measurementType;
                @optional                OpenFMB_Information_Model::openfmb::commonmodule::UnitMultiplierKind multiplier;
                @optional                string name;
                @optional                OpenFMB_Information_Model::openfmb::commonmodule::PhaseCodeKind phases;
                @optional                OpenFMB_Information_Model::openfmb::commonmodule::UnitSymbolKind unit;
                OpenFMB_Information_Model::openfmb::commonmodule::DiscreteValue  discreteMeasurementValue;
            };
            @nested(TRUE) 
            struct DiscreteMeasurementList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::Discrete>  discreteMeasurement;
            };
            @nested(TRUE) 
            struct EnergyConsumer : OpenFMB_Information_Model::openfmb::commonmodule::IdentifiedObject {
                @optional                string operatingLimit;
            };
            @nested(TRUE) 
            struct ESS : OpenFMB_Information_Model::openfmb::commonmodule::IdentifiedObject {
                octet __dummy_prevent_empty_class_ESS;
            };
            @nested(TRUE) 
            struct Event : OpenFMB_Information_Model::openfmb::commonmodule::IdentifiedObject {
                @optional                UML_Extension::dateTime timestamp;
                string type;
                @optional                string value;
                @optional                string typeExtension;
            };
            @nested(TRUE) 
            struct GeneratingUnit : OpenFMB_Information_Model::openfmb::commonmodule::IdentifiedObject {
                @optional                OpenFMB_Information_Model::openfmb::commonmodule::ActivePower maxOperatingP;
            };
            @nested(TRUE) 
            struct Market : OpenFMB_Information_Model::openfmb::commonmodule::IdentifiedObject {
                @optional                UML_Extension::dateTime actualEnd;
                @optional                UML_Extension::dateTime actualStart;
                @optional                boolean dst;
                @optional                UML_Extension::dateTime end;
                @optional                string localTimeZone;
                @optional                UML_Extension::dateTime start;
                @optional                string status;
                @optional                float timeIntervalLength;
                @optional                UML_Extension::dateTime tradingDay;
                @optional                string tradingPeriod;
                @Optional OpenFMB_Information_Model::openfmb::commonmodule::MarketFactorList  marketFactorList; 
                @Optional OpenFMB_Information_Model::openfmb::commonmodule::MarketRunList  marketRunList; 
            };
            @nested(TRUE) 
            struct Meter : OpenFMB_Information_Model::openfmb::commonmodule::IdentifiedObject {
                @Optional OpenFMB_Information_Model::openfmb::commonmodule::PowerSystemResource  powerSystemResource; 
            };
            @nested(TRUE) 
            struct OptimizedMicroGridMarket : OpenFMB_Information_Model::openfmb::commonmodule::Market {
                octet __dummy_prevent_empty_class_OptimizedMicroGridMarket;
            };
            @nested(TRUE) 
            struct SecurityEvent : OpenFMB_Information_Model::openfmb::commonmodule::Event {
                @optional                string log;
                @optional                string severity;
            };
            @nested(TRUE) 
            struct Status {
                @optional                string description;
                @Optional OpenFMB_Information_Model::openfmb::commonmodule::DiscreteMeasurementList  discreteMeasurementList; 
                @Optional OpenFMB_Information_Model::openfmb::commonmodule::BooleanMeasurementList  booleanMeasurementList; 
                @Optional OpenFMB_Information_Model::openfmb::commonmodule::StringMeasurementList  stringMeasurementList; 
                @Optional OpenFMB_Information_Model::openfmb::commonmodule::AnalogMeasurementList  analogMeasurementList; 
            };
            @nested(TRUE) 
            struct WeatherData {
                @optional                string interval;
                @optional                string source;
                @optional                string version;
                @optional                UML_Extension::dateTime versionDateTime;
                @Optional OpenFMB_Information_Model::openfmb::commonmodule::Temperature  temperature; 
                @Optional OpenFMB_Information_Model::openfmb::commonmodule::Wind  wind; 
                @Optional OpenFMB_Information_Model::openfmb::commonmodule::Humidity  humidity; 
                @Optional OpenFMB_Information_Model::openfmb::commonmodule::SunRadiation  sunRadiation; 
            };
        }; /* module commonmodule */

        module essmodule {
            @nested(FALSE) 
            struct ESSControlProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::ESSControl  essControl;
                OpenFMB_Information_Model::openfmb::commonmodule::ESS  ess;
            };
            @nested(FALSE) 
            struct ESSControlScheduleProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::ESS  ess;
                OpenFMB_Information_Model::openfmb::commonmodule::ESSControlScheduleList  essControlScheduleList;
            };
            @nested(FALSE) 
            struct ESSEventProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::ESSEvent  essEvent;
                OpenFMB_Information_Model::openfmb::commonmodule::ESS  ess;
            };
            @nested(FALSE) 
            struct ESSReadingProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::ESSReadingList  essReadingList;
                OpenFMB_Information_Model::openfmb::commonmodule::ESS  ess;
            };
        }; /* module essmodule */

        module generationmodule {
            @nested(FALSE) 
            struct GenerationControlScheduleProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::GeneratingUnit  generatingUnit;
                OpenFMB_Information_Model::openfmb::commonmodule::GenerationControlScheduleList  generationControlScheduleList;
            };
            @nested(FALSE) 
            struct GenerationControlProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::GeneratingUnit  generatingUnit;
                OpenFMB_Information_Model::openfmb::commonmodule::GenerationControl  generationControl;
            };
            @nested(FALSE) 
            struct GenerationForecastProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::GeneratingUnit  generatingUnit;
                OpenFMB_Information_Model::openfmb::commonmodule::ForecastSchedule  forecastSchedule;
            };
            @nested(FALSE) 
            struct GenerationReadingProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::GenerationReadingList  generationReadingList;
                OpenFMB_Information_Model::openfmb::commonmodule::GeneratingUnit  generatingUnit;
            };
            @nested(FALSE) 
            struct GenerationEventProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::GeneratingUnit  generatingUnit;
                OpenFMB_Information_Model::openfmb::commonmodule::GenerationEvent  generationEvent;
            };
        }; /* module generationmodule */

        module loadmodule {
            @nested(FALSE) 
            struct LoadControlScheduleProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::EnergyConsumer  energyConsumer;
                OpenFMB_Information_Model::openfmb::commonmodule::LoadControlScheduleList  loadControlScheduleList;
            };
            @nested(FALSE) 
            struct LoadControlProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::EnergyConsumer  energyConsumer;
                OpenFMB_Information_Model::openfmb::commonmodule::LoadControl  loadControl;
            };
            @nested(FALSE) 
            struct LoadForecastProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::EnergyConsumer  energyConsumer;
                OpenFMB_Information_Model::openfmb::commonmodule::ForecastSchedule  forecastSchedule;
            };
            @nested(FALSE) 
            struct LoadReadingProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::EnergyConsumer  energyConsumer;
                OpenFMB_Information_Model::openfmb::commonmodule::LoadReadingList  loadReadingList;
            };
        }; /* module loadmodule */

        module optimizermodule {
            @nested(TRUE) 
            struct ESSControlScheduleProfileList {
                sequence<OpenFMB_Information_Model::openfmb::essmodule::ESSControlScheduleProfile>  essControlScheduleProfile;
            };
            @nested(TRUE) 
            struct LoadControlScheduleProfileList {
                sequence<OpenFMB_Information_Model::openfmb::loadmodule::LoadControlScheduleProfile>  loadControlScheduleProfile;
            };
            @nested(TRUE) 
            struct RegulatorControlScheduleProfileList {
                sequence<OpenFMB_Information_Model::openfmb::regulatormodule::RegulatorControlScheduleProfile>  regulatorControlScheduleProfile;
            };
            @nested(TRUE) 
            struct SolarControlScheduleProfileList {
                sequence<OpenFMB_Information_Model::openfmb::solarmodule::SolarControlScheduleProfile>  solarControlScheduleProfile;
            };
            @nested(FALSE) 
            struct RequestedOptimizerScheduleProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                @Optional OpenFMB_Information_Model::openfmb::optimizermodule::RegulatorControlScheduleProfileList  regulatorControlScheduleProfileList; 
                @Optional OpenFMB_Information_Model::openfmb::optimizermodule::SolarControlScheduleProfileList  solarControlScheduleProfileList; 
                @Optional OpenFMB_Information_Model::openfmb::optimizermodule::LoadControlScheduleProfileList  loadControlScheduleProfileList; 
                @Optional OpenFMB_Information_Model::openfmb::optimizermodule::RequestedInterconnectionScheduleProfileList  requestedInterconnectionScheduleProfileList; 
                @Optional OpenFMB_Information_Model::openfmb::optimizermodule::ESSControlScheduleProfileList  essControlScheduleProfileList; 
            };
        }; /* module optimizermodule */

        module resourcemodule {
            @nested(FALSE) 
            struct ResourceReadingProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::Meter  meter;
                OpenFMB_Information_Model::openfmb::commonmodule::ResourceReadingList  resourceReadingList;
            };
        }; /* module resourcemodule */

        module securitymodule {
            @nested(FALSE) 
            struct SecurityEventProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::SecurityEvent  securityEvent;
            };
        }; /* module securitymodule */

        module weathermodule {
            @nested(FALSE) 
            struct WeatherDataProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::WeatherData  weatherData;
            };
        }; /* module weathermodule */

    }; /* module openfmb */

}; /* module OpenFMB_Information_Model */

module OpenFMB_Information_Model {
    module openfmb {
        module breakermodule {
            @nested(FALSE) 
            struct BreakerEventProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::BreakerEvent  breakerEvent;
                OpenFMB_Information_Model::openfmb::commonmodule::Breaker  breaker;
            };
            @nested(FALSE) 
            struct BreakerReadingProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::BreakerReadingList  breakerReadingList;
                OpenFMB_Information_Model::openfmb::commonmodule::Breaker  breaker;
            };
        }; /* module breakermodule */

        module commonmodule {
            @nested(TRUE) 
            struct BreakerStatus : OpenFMB_Information_Model::openfmb::commonmodule::Status {
                octet __dummy_prevent_empty_class_BreakerStatus;
            };
            @nested(TRUE) 
            struct ESSStatus : OpenFMB_Information_Model::openfmb::commonmodule::Status {
                octet __dummy_prevent_empty_class_ESSStatus;
            };
            @nested(TRUE) 
            struct GenerationStatus : OpenFMB_Information_Model::openfmb::commonmodule::Status {
                octet __dummy_prevent_empty_class_GenerationStatus;
            };
            @nested(TRUE) 
            struct InterchangeSchedule : OpenFMB_Information_Model::openfmb::commonmodule::Curve {
                @optional                OpenFMB_Information_Model::openfmb::commonmodule::InterTieDirectionKind directionType;
                @optional                OpenFMB_Information_Model::openfmb::commonmodule::MarketProductKind energyType;
                @optional                long intervalLength;
                @optional                OpenFMB_Information_Model::openfmb::commonmodule::EnergyProductKind scheduleType;
                @optional                string scheduleTypeExtension;
                @optional                string directionTypeExtension;
                @optional                string energyTypeExtension;
                @Optional OpenFMB_Information_Model::openfmb::commonmodule::OptimizedMicroGridMarket  optimizedMicroGridMarket; 
            };
            @nested(TRUE) 
            struct InterchangeScheduleList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::InterchangeSchedule>  interchangeSchedule;
            };
            @nested(TRUE) 
            struct LoadStatus : OpenFMB_Information_Model::openfmb::commonmodule::Status {
                octet __dummy_prevent_empty_class_LoadStatus;
            };
            @nested(TRUE) 
            struct MotorOperatedSwitchStatus : OpenFMB_Information_Model::openfmb::commonmodule::Status {
                octet __dummy_prevent_empty_class_MotorOperatedSwitchStatus;
            };
            @nested(TRUE) 
            struct RecloserStatus : OpenFMB_Information_Model::openfmb::commonmodule::Status {
                octet __dummy_prevent_empty_class_RecloserStatus;
            };
            @nested(TRUE) 
            struct RegulatorStatus : OpenFMB_Information_Model::openfmb::commonmodule::Status {
                octet __dummy_prevent_empty_class_RegulatorStatus;
            };
            @nested(TRUE) 
            struct ResourceStatus : OpenFMB_Information_Model::openfmb::commonmodule::Status {
                octet __dummy_prevent_empty_class_ResourceStatus;
            };
            @nested(TRUE) 
            struct ShuntStatus : OpenFMB_Information_Model::openfmb::commonmodule::Status {
                octet __dummy_prevent_empty_class_ShuntStatus;
            };
            @nested(TRUE) 
            struct SolarStatus : OpenFMB_Information_Model::openfmb::commonmodule::Status {
                octet __dummy_prevent_empty_class_SolarStatus;
            };
        }; /* module commonmodule */

        module essmodule {
            @nested(FALSE) 
            struct ESSStatusProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::ESS  ess;
                OpenFMB_Information_Model::openfmb::commonmodule::ESSStatus  essStatus;
            };
        }; /* module essmodule */

        module generationmodule {
            @nested(FALSE) 
            struct GenerationStatusProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::GeneratingUnit  generatingUnit;
                OpenFMB_Information_Model::openfmb::commonmodule::GenerationStatus  generationStatus;
            };
        }; /* module generationmodule */

        module interchangemodule {
            @nested(FALSE) 
            struct InterchangeScheduleProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::InterchangeScheduleList  interchangeScheduleList;
                OpenFMB_Information_Model::openfmb::commonmodule::PowerSystemResource  powerSystemResource;
            };
        }; /* module interchangemodule */

        module loadmodule {
            @nested(FALSE) 
            struct LoadStatusProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::EnergyConsumer  energyConsumer;
                OpenFMB_Information_Model::openfmb::commonmodule::LoadStatus  loadStatus;
            };
        }; /* module loadmodule */

        module motoroperatedswitchmodule {
            @nested(FALSE) 
            struct MotorOperatedSwitchStatusProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::MotorOperatedSwitch  motorOperatedSwitch;
                OpenFMB_Information_Model::openfmb::commonmodule::MotorOperatedSwitchStatus  motorOperatedSwitchStatus;
            };
        }; /* module motoroperatedswitchmodule */

        module optimizermodule {
            @nested(FALSE) 
            struct PlannedOptimizerScheduleProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                @Optional OpenFMB_Information_Model::openfmb::optimizermodule::RegulatorControlScheduleProfileList  regulatorControlScheduleProfileList; 
                @Optional OpenFMB_Information_Model::openfmb::optimizermodule::SolarControlScheduleProfileList  solarControlScheduleProfileList; 
                @Optional OpenFMB_Information_Model::openfmb::optimizermodule::PlannedInterconnectionScheduleProfileList  plannedInterconnectionScheduleProfileList; 
                @Optional OpenFMB_Information_Model::openfmb::optimizermodule::LoadControlScheduleProfileList  loadControlScheduleProfileList; 
                @Optional OpenFMB_Information_Model::openfmb::optimizermodule::ESSControlScheduleProfileList  essControlScheduleProfileList; 
            };
        }; /* module optimizermodule */

        module reclosermodule {
            @nested(FALSE) 
            struct RecloserStatusProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::Recloser  recloser;
                OpenFMB_Information_Model::openfmb::commonmodule::RecloserStatus  recloserStatus;
            };
        }; /* module reclosermodule */

        module regulatormodule {
            @nested(FALSE) 
            struct RegulatorStatusProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::RegulatorSystem  regulatorSystem;
                OpenFMB_Information_Model::openfmb::commonmodule::RegulatorStatus  regulatorStatus;
            };
        }; /* module regulatormodule */

        module resourcemodule {
            @nested(FALSE) 
            struct ResourceStatusProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::ResourceStatus  resourceStatus;
                OpenFMB_Information_Model::openfmb::commonmodule::PowerSystemResource  powerSystemResource;
            };
        }; /* module resourcemodule */

        module shuntmodule {
            @nested(FALSE) 
            struct ShuntStatusProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::ShuntStatus  shuntStatus;
                OpenFMB_Information_Model::openfmb::commonmodule::ShuntSystem  shuntSystem;
            };
        }; /* module shuntmodule */

        module solarmodule {
            @nested(FALSE) 
            struct SolarStatusProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::SolarInverter  solarInverter;
                OpenFMB_Information_Model::openfmb::commonmodule::SolarStatus  solarStatus;
            };
        }; /* module solarmodule */

    }; /* module openfmb */

}; /* module OpenFMB_Information_Model */

module OpenFMB_Information_Model {
    module openfmb {
        module breakermodule {
            @nested(FALSE) 
            struct BreakerStatusProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::BreakerStatus  breakerStatus;
                OpenFMB_Information_Model::openfmb::commonmodule::Breaker  breaker;
            };
        }; /* module breakermodule */

    }; /* module openfmb */

}; /* module OpenFMB_Information_Model */

