/*
 *  IDL file generated by RTI Connext DDS Enterprise Architect IDL 4 Add-in version 1.0
 *      Enterprise Architect File:  C:\Xtensible\OpenFMB\IDLs\Phase 2\Model\OpenFMB for IDL generation-2016-10-21 (10-31 again after v1.10, 11-04 after v1.11 & issue49).eap
 *      Date: 11/4/2016 1:46:45 PM
 */
 
/* ******************************************************************* */
/* These are UML builtin primitive types that are not primitive in IDL */
module UML_Extension {
    typedef long long dateTime;
};

/* ******************************************************************* */
/* These are Types defined in the model */

/* -----  Model: "Model"  ----- */
module OpenFMB_Information_Model {
    module openfmb {
        module breakermodule {
            struct BreakerEventProfile;
            struct BreakerReadingProfile;
            struct BreakerStatusProfile;
        }; /* module breakermodule */

        module commonmodule {
            struct ActivePower;
            struct Analog;
            struct AnalogMeasurementList;
            struct AnalogValue;
            struct BasicIntervalSchedule;
            struct BooleanMeasurement;
            struct BooleanMeasurementList;
            struct BooleanMeasurementValue;
            struct Breaker;
            struct BreakerEvent;
            struct BreakerReading;
            struct BreakerReadingList;
            struct BreakerStatus;
            struct Container;
            struct Curve;
            struct CurveData;
            struct CurveDataList;
            struct DateTimeInterval;
            struct Discrete;
            struct DiscreteMeasurementList;
            struct DiscreteValue;
            struct EnergyConsumer;
            struct ESS;
            struct ESSControl;
            struct ESSControlSchedule;
            struct ESSControlScheduleList;
            struct ESSEvent;
            struct ESSReading;
            struct ESSReadingList;
            struct ESSStatus;
            struct Event;
            struct ForecastSchedule;
            struct GeneratingUnit;
            struct GenerationControl;
            struct GenerationControlSchedule;
            struct GenerationControlScheduleList;
            struct GenerationEvent;
            struct GenerationReading;
            struct GenerationReadingList;
            struct GenerationStatus;
            typedef octet HexBinary16[2];
            struct Humidity;
            struct HumidityData;
            struct HumidityDataList;
            struct IdentifiedObject;
            struct InterchangeSchedule;
            struct InterchangeScheduleList;
            struct InterconnectionPoint;
            struct InterconnectionSchedule;
            struct InterconnectionScheduleList;
            struct IrregularTimePoint;
            struct IrregularTimePointList;
            struct LoadControl;
            struct LoadControlSchedule;
            struct LoadControlScheduleList;
            struct LoadReading;
            struct LoadReadingList;
            struct LoadStatus;
            struct Market;
            struct MarketFactorList;
            struct MarketFactors;
            struct MarketRun;
            struct MarketRunList;
            struct Meter;
            struct MotorOperatedSwitch;
            struct MotorOperatedSwitchControl;
            struct MotorOperatedSwitchControlSchedule;
            struct MotorOperatedSwitchControlScheduleList;
            struct MotorOperatedSwitchEvent;
            struct MotorOperatedSwitchReading;
            struct MotorOperatedSwitchReadingList;
            struct MotorOperatedSwitchStatus;
            struct OptimizedMicroGridMarket;
            struct PowerSystemResource;
            struct Reading;
            struct Recloser;
            struct RecloserControl;
            struct RecloserEvent;
            struct RecloserReading;
            struct RecloserReadingList;
            struct RecloserStatus;
            struct RegulatorControlSchedule;
            struct RegulatorControlScheduleList;
            struct RegulatorEvent;
            struct RegulatorReading;
            struct RegulatorReadingList;
            struct RegulatorStatus;
            struct RegulatorSystem;
            struct ResourceReading;
            struct ResourceReadingList;
            struct ResourceStatus;
            struct SecurityEvent;
            struct SetPoint;
            struct SetPointList;
            struct ShuntControl;
            struct ShuntControlSchedule;
            struct ShuntControlScheduleList;
            struct ShuntReading;
            struct ShuntReadingList;
            struct ShuntStatus;
            struct ShuntSystem;
            struct SolarCapability;
            struct SolarControl;
            struct SolarControlSchedule;
            struct SolarControlScheduleList;
            struct SolarInverter;
            struct SolarInverterEvent;
            struct SolarReading;
            struct SolarReadingList;
            struct SolarStatus;
            struct Status;
            struct StringMeasurement;
            struct StringMeasurementList;
            struct StringMeasurementValue;
            struct SunRadiation;
            struct SunRadiationData;
            struct SunRadiationDataList;
            struct Temperature;
            struct TemperatureData;
            struct TemperatureDataList;
            typedef string uuidType;
            struct WeatherData;
            struct Wind;
            struct WindData;
            struct WindDataList;
            enum BreakerReadingTypeKind {
                BreakerReadingTypeKind_Hz,  //@Value(2) 
                BreakerReadingTypeKind_Ia,  //@Value(3) 
                BreakerReadingTypeKind_Ib,  //@Value(4) 
                BreakerReadingTypeKind_Ic,  //@Value(5) 
                BreakerReadingTypeKind_Amp,  //@Value(6) 
                BreakerReadingTypeKind_kVAa,  //@Value(7) 
                BreakerReadingTypeKind_kVAb,  //@Value(8) 
                BreakerReadingTypeKind_kVAc,  //@Value(9) 
                BreakerReadingTypeKind_kVA,  //@Value(10) 
                BreakerReadingTypeKind_kWa,  //@Value(11) 
                BreakerReadingTypeKind_kWb,  //@Value(12) 
                BreakerReadingTypeKind_kWc,  //@Value(13) 
                BreakerReadingTypeKind_kW,  //@Value(14) 
                BreakerReadingTypeKind_Va,  //@Value(15) 
                BreakerReadingTypeKind_none,  //@Value(0) 
                BreakerReadingTypeKind_Vb,  //@Value(16) 
                BreakerReadingTypeKind_Vc,  //@Value(17) 
                BreakerReadingTypeKind_Vab,  //@Value(18) 
                BreakerReadingTypeKind_Vbc,  //@Value(19) 
                BreakerReadingTypeKind_Vca,  //@Value(20) 
                BreakerReadingTypeKind_PAa,  //@Value(21) 
                BreakerReadingTypeKind_PAb,  //@Value(22) 
                BreakerReadingTypeKind_PAc,  //@Value(23) 
                BreakerReadingTypeKind_kVARa,  //@Value(24) 
                BreakerReadingTypeKind_kVARb,  //@Value(25) 
                BreakerReadingTypeKind_kVARc,  //@Value(26) 
                BreakerReadingTypeKind_kVAR,  //@Value(27) 
                BreakerReadingTypeKind_other  //@Value(1) 
            };
            enum CurveNameKind {
                CurveNameKind_other,  //@Value(1) 
                CurveNameKind_realPower,  //@Value(2) 
                CurveNameKind_none,  //@Value(0) 
                CurveNameKind_reactivePower,  //@Value(3) 
                CurveNameKind_frequency,  //@Value(4) 
                CurveNameKind_voltage,  //@Value(5) 
                CurveNameKind_rampRate,  //@Value(6) 
                CurveNameKind_peakShavingLimit,  //@Value(7) 
                CurveNameKind_baseLoadingLimit,  //@Value(8) 
                CurveNameKind_efficiency,  //@Value(9) 
                CurveNameKind_curtailment  //@Value(10) 
            };
            enum CurveStyleKind {
                CurveStyleKind_constantYValue,  //@Value(2) 
                CurveStyleKind_straightLineYValues,  //@Value(3) 
                CurveStyleKind_none,  //@Value(0) 
                CurveStyleKind_other  //@Value(1) 
            };
            enum EnergyProductKind {
                EnergyProductKind_firm,  //@Value(2) 
                EnergyProductKind_nfrm,  //@Value(3) 
                EnergyProductKind_dyn,  //@Value(5) 
                EnergyProductKind_whl,  //@Value(4) 
                EnergyProductKind_none,  //@Value(0) 
                EnergyProductKind_other  //@Value(1) 
            };
            enum ESSControlKind {
                ESSControlKind_powerRequest,  //@Value(8) 
                ESSControlKind_island,  //@Value(2) 
                ESSControlKind_resynchronization,  //@Value(3) 
                ESSControlKind_maintainSOC,  //@Value(4) 
                ESSControlKind_standby,  //@Value(5) 
                ESSControlKind_firm,  //@Value(6) 
                ESSControlKind_none,  //@Value(0) 
                ESSControlKind_loadFollowing,  //@Value(7) 
                ESSControlKind_other  //@Value(1) 
            };
            enum ESSEventKind {
                ESSEventKind_charging,  //@Value(4) 
                ESSEventKind_discharging,  //@Value(2) 
                ESSEventKind_none,  //@Value(0) 
                ESSEventKind_idle,  //@Value(3) 
                ESSEventKind_other  //@Value(1) 
            };
            enum ESSReadingTypeKind {
                ESSReadingTypeKind_Hz,  //@Value(2) 
                ESSReadingTypeKind_Ia,  //@Value(3) 
                ESSReadingTypeKind_Ib,  //@Value(4) 
                ESSReadingTypeKind_Ic,  //@Value(5) 
                ESSReadingTypeKind_Amp,  //@Value(6) 
                ESSReadingTypeKind_kVAa,  //@Value(7) 
                ESSReadingTypeKind_kVAb,  //@Value(8) 
                ESSReadingTypeKind_kVAc,  //@Value(9) 
                ESSReadingTypeKind_kVA,  //@Value(10) 
                ESSReadingTypeKind_kWa,  //@Value(11) 
                ESSReadingTypeKind_kWb,  //@Value(12) 
                ESSReadingTypeKind_kWc,  //@Value(13) 
                ESSReadingTypeKind_kW,  //@Value(14) 
                ESSReadingTypeKind_Va,  //@Value(15) 
                ESSReadingTypeKind_none,  //@Value(0) 
                ESSReadingTypeKind_Vb,  //@Value(16) 
                ESSReadingTypeKind_Vc,  //@Value(17) 
                ESSReadingTypeKind_Vab,  //@Value(18) 
                ESSReadingTypeKind_Vbc,  //@Value(19) 
                ESSReadingTypeKind_Vca,  //@Value(20) 
                ESSReadingTypeKind_PAa,  //@Value(21) 
                ESSReadingTypeKind_PAb,  //@Value(22) 
                ESSReadingTypeKind_PAc,  //@Value(23) 
                ESSReadingTypeKind_kVARa,  //@Value(24) 
                ESSReadingTypeKind_kVARb,  //@Value(25) 
                ESSReadingTypeKind_kVARc,  //@Value(26) 
                ESSReadingTypeKind_kVAR,  //@Value(27) 
                ESSReadingTypeKind_other  //@Value(1) 
            };
            enum ExecutionKind {
                ExecutionKind_da,  //@Value(5) 
                ExecutionKind_hasp,  //@Value(2) 
                ExecutionKind_rtpd,  //@Value(4) 
                ExecutionKind_rtd,  //@Value(3) 
                ExecutionKind_none,  //@Value(0) 
                ExecutionKind_other  //@Value(1) 
            };
            enum GenerationControlKind {
                GenerationControlKind_start,  //@Value(4) 
                GenerationControlKind_stop,  //@Value(2) 
                GenerationControlKind_none,  //@Value(0) 
                GenerationControlKind_isochronousEnabled,  //@Value(3) 
                GenerationControlKind_other  //@Value(1) 
            };
            enum GenerationEventKind {
                GenerationEventKind_generating,  //@Value(6) 
                GenerationEventKind_notGenerating,  //@Value(2) 
                GenerationEventKind_none,  //@Value(0) 
                GenerationEventKind_isochronousEnabled,  //@Value(3) 
                GenerationEventKind_alarmButGenerating,  //@Value(4) 
                GenerationEventKind_alarmNotGenerating,  //@Value(5) 
                GenerationEventKind_other  //@Value(1) 
            };
            enum GenerationReadingTypeKind {
                GenerationReadingTypeKind_Hz,  //@Value(2) 
                GenerationReadingTypeKind_Ia,  //@Value(3) 
                GenerationReadingTypeKind_Ib,  //@Value(4) 
                GenerationReadingTypeKind_Ic,  //@Value(5) 
                GenerationReadingTypeKind_Amp,  //@Value(6) 
                GenerationReadingTypeKind_kVAa,  //@Value(7) 
                GenerationReadingTypeKind_kVAb,  //@Value(8) 
                GenerationReadingTypeKind_kVAc,  //@Value(9) 
                GenerationReadingTypeKind_kVA,  //@Value(10) 
                GenerationReadingTypeKind_kWa,  //@Value(11) 
                GenerationReadingTypeKind_kWb,  //@Value(12) 
                GenerationReadingTypeKind_kWc,  //@Value(13) 
                GenerationReadingTypeKind_kW,  //@Value(14) 
                GenerationReadingTypeKind_Va,  //@Value(15) 
                GenerationReadingTypeKind_none,  //@Value(0) 
                GenerationReadingTypeKind_Vb,  //@Value(16) 
                GenerationReadingTypeKind_Vc,  //@Value(17) 
                GenerationReadingTypeKind_Vab,  //@Value(18) 
                GenerationReadingTypeKind_Vbc,  //@Value(19) 
                GenerationReadingTypeKind_Vca,  //@Value(20) 
                GenerationReadingTypeKind_PAa,  //@Value(21) 
                GenerationReadingTypeKind_PAb,  //@Value(22) 
                GenerationReadingTypeKind_PAc,  //@Value(23) 
                GenerationReadingTypeKind_kVARa,  //@Value(24) 
                GenerationReadingTypeKind_kVARb,  //@Value(25) 
                GenerationReadingTypeKind_kVARc,  //@Value(26) 
                GenerationReadingTypeKind_kVAR,  //@Value(27) 
                GenerationReadingTypeKind_other  //@Value(1) 
            };
            enum InterTieDirectionKind {
                InterTieDirectionKind_e,  //@Value(4) 
                InterTieDirectionKind_i,  //@Value(2) 
                InterTieDirectionKind_netzero,  //@Value(3) 
                InterTieDirectionKind_none,  //@Value(0) 
                InterTieDirectionKind_other  //@Value(1) 
            };
            enum InverterModeKind {
                InverterModeKind_csi,  //@Value(5) 
                InverterModeKind_vsiPQ,  //@Value(2) 
                InverterModeKind_none,  //@Value(0) 
                InverterModeKind_vsiVF,  //@Value(3) 
                InverterModeKind_vsiISO,  //@Value(4) 
                InverterModeKind_other  //@Value(1) 
            };
            enum LoadControlKind {
                LoadControlKind_start,  //@Value(3) 
                LoadControlKind_stop,  //@Value(2) 
                LoadControlKind_none,  //@Value(0) 
                LoadControlKind_other  //@Value(1) 
            };
            enum LoadReadingTypeKind {
                LoadReadingTypeKind_Hz,  //@Value(2) 
                LoadReadingTypeKind_Ia,  //@Value(3) 
                LoadReadingTypeKind_Ib,  //@Value(4) 
                LoadReadingTypeKind_Ic,  //@Value(5) 
                LoadReadingTypeKind_Amp,  //@Value(6) 
                LoadReadingTypeKind_kVAa,  //@Value(7) 
                LoadReadingTypeKind_kVAb,  //@Value(8) 
                LoadReadingTypeKind_kVAc,  //@Value(9) 
                LoadReadingTypeKind_kVA,  //@Value(10) 
                LoadReadingTypeKind_kWa,  //@Value(11) 
                LoadReadingTypeKind_kWb,  //@Value(12) 
                LoadReadingTypeKind_kWc,  //@Value(13) 
                LoadReadingTypeKind_kW,  //@Value(14) 
                LoadReadingTypeKind_Va,  //@Value(15) 
                LoadReadingTypeKind_none,  //@Value(0) 
                LoadReadingTypeKind_Vb,  //@Value(16) 
                LoadReadingTypeKind_Vc,  //@Value(17) 
                LoadReadingTypeKind_Vab,  //@Value(18) 
                LoadReadingTypeKind_Vbc,  //@Value(19) 
                LoadReadingTypeKind_Vca,  //@Value(20) 
                LoadReadingTypeKind_PAa,  //@Value(21) 
                LoadReadingTypeKind_PAb,  //@Value(22) 
                LoadReadingTypeKind_PAc,  //@Value(23) 
                LoadReadingTypeKind_kVARa,  //@Value(24) 
                LoadReadingTypeKind_kVARb,  //@Value(25) 
                LoadReadingTypeKind_kVARc,  //@Value(26) 
                LoadReadingTypeKind_kVAR,  //@Value(27) 
                LoadReadingTypeKind_other  //@Value(1) 
            };
            enum MarketKind {
                MarketKind_dam,  //@Value(5) 
                MarketKind_rtm,  //@Value(3) 
                MarketKind_ham,  //@Value(2) 
                MarketKind_ruc,  //@Value(4) 
                MarketKind_none,  //@Value(0) 
                MarketKind_other  //@Value(1) 
            };
            enum MarketProductKind {
                MarketProductKind_en,  //@Value(9) 
                MarketProductKind_ru,  //@Value(7) 
                MarketProductKind_rd,  //@Value(5) 
                MarketProductKind_sr,  //@Value(8) 
                MarketProductKind_nr,  //@Value(3) 
                MarketProductKind_rc,  //@Value(4) 
                MarketProductKind_lfu,  //@Value(2) 
                MarketProductKind_none,  //@Value(0) 
                MarketProductKind_reg,  //@Value(6) 
                MarketProductKind_other  //@Value(1) 
            };
            enum MotorOperatedSwitchControlKind {
                MotorOperatedSwitchControlKind_open,  //@Value(4) 
                MotorOperatedSwitchControlKind_close,  //@Value(2) 
                MotorOperatedSwitchControlKind_syncCheck,  //@Value(3) 
                MotorOperatedSwitchControlKind_none,  //@Value(0) 
                MotorOperatedSwitchControlKind_other  //@Value(1) 
            };
            enum MotorOperatedSwitchReadingTypeKind {
                MotorOperatedSwitchReadingTypeKind_Hz,  //@Value(2) 
                MotorOperatedSwitchReadingTypeKind_Ia,  //@Value(3) 
                MotorOperatedSwitchReadingTypeKind_Ib,  //@Value(4) 
                MotorOperatedSwitchReadingTypeKind_Ic,  //@Value(5) 
                MotorOperatedSwitchReadingTypeKind_Amp,  //@Value(6) 
                MotorOperatedSwitchReadingTypeKind_kVAa,  //@Value(7) 
                MotorOperatedSwitchReadingTypeKind_kVAb,  //@Value(8) 
                MotorOperatedSwitchReadingTypeKind_kVAc,  //@Value(9) 
                MotorOperatedSwitchReadingTypeKind_kVA,  //@Value(10) 
                MotorOperatedSwitchReadingTypeKind_kWa,  //@Value(11) 
                MotorOperatedSwitchReadingTypeKind_kWb,  //@Value(12) 
                MotorOperatedSwitchReadingTypeKind_kWc,  //@Value(13) 
                MotorOperatedSwitchReadingTypeKind_kW,  //@Value(14) 
                MotorOperatedSwitchReadingTypeKind_Va,  //@Value(15) 
                MotorOperatedSwitchReadingTypeKind_none,  //@Value(0) 
                MotorOperatedSwitchReadingTypeKind_Vb,  //@Value(16) 
                MotorOperatedSwitchReadingTypeKind_Vc,  //@Value(17) 
                MotorOperatedSwitchReadingTypeKind_Vab,  //@Value(18) 
                MotorOperatedSwitchReadingTypeKind_Vbc,  //@Value(19) 
                MotorOperatedSwitchReadingTypeKind_Vca,  //@Value(20) 
                MotorOperatedSwitchReadingTypeKind_PAa,  //@Value(21) 
                MotorOperatedSwitchReadingTypeKind_PAb,  //@Value(22) 
                MotorOperatedSwitchReadingTypeKind_PAc,  //@Value(23) 
                MotorOperatedSwitchReadingTypeKind_kVARa,  //@Value(25) 
                MotorOperatedSwitchReadingTypeKind_kVARb,  //@Value(26) 
                MotorOperatedSwitchReadingTypeKind_kVARc,  //@Value(27) 
                MotorOperatedSwitchReadingTypeKind_kVAR,  //@Value(24) 
                MotorOperatedSwitchReadingTypeKind_other  //@Value(1) 
            };
            enum PhaseCodeKind {
                PhaseCodeKind_A,  //@Value(128) 
                PhaseCodeKind_AB,  //@Value(132) 
                PhaseCodeKind_ABC,  //@Value(224) 
                PhaseCodeKind_ABCN,  //@Value(225) 
                PhaseCodeKind_ABN,  //@Value(193) 
                PhaseCodeKind_AC,  //@Value(40) 
                PhaseCodeKind_ACN,  //@Value(41) 
                PhaseCodeKind_AN,  //@Value(129) 
                PhaseCodeKind_B,  //@Value(64) 
                PhaseCodeKind_BC,  //@Value(66) 
                PhaseCodeKind_BCN,  //@Value(97) 
                PhaseCodeKind_BN,  //@Value(65) 
                PhaseCodeKind_C,  //@Value(32) 
                PhaseCodeKind_CN,  //@Value(33) 
                PhaseCodeKind_N,  //@Value(16) 
                PhaseCodeKind_none,  //@Value(0) 
                PhaseCodeKind_s1,  //@Value(512) 
                PhaseCodeKind_s12,  //@Value(768) 
                PhaseCodeKind_s12N,  //@Value(769) 
                PhaseCodeKind_s1N,  //@Value(513) 
                PhaseCodeKind_s2,  //@Value(256) 
                PhaseCodeKind_s2N,  //@Value(257) 
                PhaseCodeKind_other  //@Value(1) 
            };
            enum RecloserControlKind {
                RecloserControlKind_open,  //@Value(4) 
                RecloserControlKind_close,  //@Value(2) 
                RecloserControlKind_syncCheck,  //@Value(3) 
                RecloserControlKind_none,  //@Value(0) 
                RecloserControlKind_other  //@Value(1) 
            };
            enum RecloserReadingTypeKind {
                RecloserReadingTypeKind_Hz,  //@Value(2) 
                RecloserReadingTypeKind_Ia,  //@Value(3) 
                RecloserReadingTypeKind_Ib,  //@Value(4) 
                RecloserReadingTypeKind_Ic,  //@Value(5) 
                RecloserReadingTypeKind_Amp,  //@Value(6) 
                RecloserReadingTypeKind_kVAa,  //@Value(7) 
                RecloserReadingTypeKind_kVAb,  //@Value(8) 
                RecloserReadingTypeKind_kVAc,  //@Value(9) 
                RecloserReadingTypeKind_kVA,  //@Value(10) 
                RecloserReadingTypeKind_kWa,  //@Value(11) 
                RecloserReadingTypeKind_kWb,  //@Value(12) 
                RecloserReadingTypeKind_kWc,  //@Value(13) 
                RecloserReadingTypeKind_kW,  //@Value(14) 
                RecloserReadingTypeKind_Va,  //@Value(15) 
                RecloserReadingTypeKind_none,  //@Value(0) 
                RecloserReadingTypeKind_Vb,  //@Value(16) 
                RecloserReadingTypeKind_Vc,  //@Value(17) 
                RecloserReadingTypeKind_Vab,  //@Value(18) 
                RecloserReadingTypeKind_Vbc,  //@Value(19) 
                RecloserReadingTypeKind_Vca,  //@Value(20) 
                RecloserReadingTypeKind_PAa,  //@Value(21) 
                RecloserReadingTypeKind_PAb,  //@Value(22) 
                RecloserReadingTypeKind_PAc,  //@Value(23) 
                RecloserReadingTypeKind_kVARa,  //@Value(24) 
                RecloserReadingTypeKind_kVARb,  //@Value(25) 
                RecloserReadingTypeKind_kVARc,  //@Value(26) 
                RecloserReadingTypeKind_kVAR,  //@Value(27) 
                RecloserReadingTypeKind_other  //@Value(1) 
            };
            enum RegulatorEventKind {
                RegulatorEventKind_tapped,  //@Value(3) 
                RegulatorEventKind_preTapWarning,  //@Value(2) 
                RegulatorEventKind_none,  //@Value(0) 
                RegulatorEventKind_other  //@Value(1) 
            };
            enum RegulatorReadingTypeKind {
                RegulatorReadingTypeKind_Hz,  //@Value(2) 
                RegulatorReadingTypeKind_Ia,  //@Value(3) 
                RegulatorReadingTypeKind_Ib,  //@Value(4) 
                RegulatorReadingTypeKind_Ic,  //@Value(5) 
                RegulatorReadingTypeKind_Amp,  //@Value(6) 
                RegulatorReadingTypeKind_kVAa,  //@Value(7) 
                RegulatorReadingTypeKind_kVAb,  //@Value(8) 
                RegulatorReadingTypeKind_kVAc,  //@Value(9) 
                RegulatorReadingTypeKind_kVA,  //@Value(10) 
                RegulatorReadingTypeKind_kWa,  //@Value(11) 
                RegulatorReadingTypeKind_kWb,  //@Value(12) 
                RegulatorReadingTypeKind_kWc,  //@Value(13) 
                RegulatorReadingTypeKind_kW,  //@Value(14) 
                RegulatorReadingTypeKind_Va,  //@Value(15) 
                RegulatorReadingTypeKind_none,  //@Value(0) 
                RegulatorReadingTypeKind_Vb,  //@Value(16) 
                RegulatorReadingTypeKind_Vc,  //@Value(17) 
                RegulatorReadingTypeKind_Vab,  //@Value(18) 
                RegulatorReadingTypeKind_Vbc,  //@Value(19) 
                RegulatorReadingTypeKind_Vca,  //@Value(20) 
                RegulatorReadingTypeKind_PAa,  //@Value(21) 
                RegulatorReadingTypeKind_PAb,  //@Value(22) 
                RegulatorReadingTypeKind_PAc,  //@Value(23) 
                RegulatorReadingTypeKind_kVARa,  //@Value(25) 
                RegulatorReadingTypeKind_kVARb,  //@Value(26) 
                RegulatorReadingTypeKind_kVARc,  //@Value(27) 
                RegulatorReadingTypeKind_kVAR,  //@Value(24) 
                RegulatorReadingTypeKind_other  //@Value(1) 
            };
            enum ResourceReadingTypeKind {
                ResourceReadingTypeKind_Hz,  //@Value(2) 
                ResourceReadingTypeKind_Ia,  //@Value(3) 
                ResourceReadingTypeKind_Ib,  //@Value(4) 
                ResourceReadingTypeKind_Ic,  //@Value(5) 
                ResourceReadingTypeKind_Amp,  //@Value(6) 
                ResourceReadingTypeKind_kVAa,  //@Value(7) 
                ResourceReadingTypeKind_kVAb,  //@Value(8) 
                ResourceReadingTypeKind_kVAc,  //@Value(9) 
                ResourceReadingTypeKind_kVA,  //@Value(10) 
                ResourceReadingTypeKind_kWa,  //@Value(11) 
                ResourceReadingTypeKind_kWb,  //@Value(12) 
                ResourceReadingTypeKind_kWc,  //@Value(13) 
                ResourceReadingTypeKind_kW,  //@Value(14) 
                ResourceReadingTypeKind_Va,  //@Value(15) 
                ResourceReadingTypeKind_none,  //@Value(0) 
                ResourceReadingTypeKind_Vb,  //@Value(16) 
                ResourceReadingTypeKind_Vc,  //@Value(17) 
                ResourceReadingTypeKind_Vab,  //@Value(18) 
                ResourceReadingTypeKind_Vbc,  //@Value(19) 
                ResourceReadingTypeKind_Vca,  //@Value(20) 
                ResourceReadingTypeKind_PAa,  //@Value(21) 
                ResourceReadingTypeKind_PAb,  //@Value(22) 
                ResourceReadingTypeKind_PAc,  //@Value(23) 
                ResourceReadingTypeKind_kVARa,  //@Value(24) 
                ResourceReadingTypeKind_kVARb,  //@Value(25) 
                ResourceReadingTypeKind_kVARc,  //@Value(26) 
                ResourceReadingTypeKind_kVAR,  //@Value(27) 
                ResourceReadingTypeKind_other  //@Value(1) 
            };
            enum ScheduleTypeKind {
                ScheduleTypeKind_ess,  //@Value(6) 
                ScheduleTypeKind_solar,  //@Value(2) 
                ScheduleTypeKind_none,  //@Value(0) 
                ScheduleTypeKind_load,  //@Value(3) 
                ScheduleTypeKind_voltageRegulator,  //@Value(4) 
                ScheduleTypeKind_motorOperatedSwitch,  //@Value(5) 
                ScheduleTypeKind_other  //@Value(1) 
            };
            enum ShuntControlKind {
                ShuntControlKind_powerRequest,  //@Value(2) 
                ShuntControlKind_none,  //@Value(0) 
                ShuntControlKind_other  //@Value(1) 
            };
            enum ShuntReadingTypeKind {
                ShuntReadingTypeKind_Hz,  //@Value(2) 
                ShuntReadingTypeKind_Ia,  //@Value(3) 
                ShuntReadingTypeKind_Ib,  //@Value(4) 
                ShuntReadingTypeKind_Ic,  //@Value(5) 
                ShuntReadingTypeKind_Amp,  //@Value(6) 
                ShuntReadingTypeKind_kVAa,  //@Value(7) 
                ShuntReadingTypeKind_kVAb,  //@Value(8) 
                ShuntReadingTypeKind_kVAc,  //@Value(9) 
                ShuntReadingTypeKind_kVA,  //@Value(10) 
                ShuntReadingTypeKind_kWa,  //@Value(11) 
                ShuntReadingTypeKind_kWb,  //@Value(12) 
                ShuntReadingTypeKind_kWc,  //@Value(13) 
                ShuntReadingTypeKind_kW,  //@Value(14) 
                ShuntReadingTypeKind_Va,  //@Value(15) 
                ShuntReadingTypeKind_none,  //@Value(0) 
                ShuntReadingTypeKind_Vb,  //@Value(16) 
                ShuntReadingTypeKind_Vc,  //@Value(17) 
                ShuntReadingTypeKind_Vab,  //@Value(18) 
                ShuntReadingTypeKind_Vbc,  //@Value(19) 
                ShuntReadingTypeKind_Vca,  //@Value(20) 
                ShuntReadingTypeKind_PAa,  //@Value(21) 
                ShuntReadingTypeKind_PAb,  //@Value(22) 
                ShuntReadingTypeKind_PAc,  //@Value(23) 
                ShuntReadingTypeKind_kVARa,  //@Value(24) 
                ShuntReadingTypeKind_kVARb,  //@Value(25) 
                ShuntReadingTypeKind_kVARc,  //@Value(26) 
                ShuntReadingTypeKind_kVAR,  //@Value(27) 
                ShuntReadingTypeKind_other  //@Value(1) 
            };
            enum SolarControlKind {
                SolarControlKind_connect,  //@Value(3) 
                SolarControlKind_disconnect,  //@Value(2) 
                SolarControlKind_none,  //@Value(0) 
                SolarControlKind_powerRequest,  //@Value(4) 
                SolarControlKind_other  //@Value(1) 
            };
            enum SolarEventKind {
                SolarEventKind_generatingAndConnected,  //@Value(5) 
                SolarEventKind_generatingAndAvailableForConnection,  //@Value(2) 
                SolarEventKind_none,  //@Value(0) 
                SolarEventKind_offButAvailableForGenerating,  //@Value(3) 
                SolarEventKind_offAndNotAvailableForGenerating,  //@Value(4) 
                SolarEventKind_other  //@Value(1) 
            };
            enum SolarReadingTypeKind {
                SolarReadingTypeKind_Hz,  //@Value(2) 
                SolarReadingTypeKind_Ia,  //@Value(3) 
                SolarReadingTypeKind_Ib,  //@Value(4) 
                SolarReadingTypeKind_Ic,  //@Value(5) 
                SolarReadingTypeKind_Amp,  //@Value(6) 
                SolarReadingTypeKind_kVAa,  //@Value(7) 
                SolarReadingTypeKind_kVAb,  //@Value(8) 
                SolarReadingTypeKind_kVAc,  //@Value(9) 
                SolarReadingTypeKind_kVA,  //@Value(10) 
                SolarReadingTypeKind_kWa,  //@Value(11) 
                SolarReadingTypeKind_kWb,  //@Value(12) 
                SolarReadingTypeKind_kWc,  //@Value(13) 
                SolarReadingTypeKind_kW,  //@Value(14) 
                SolarReadingTypeKind_Va,  //@Value(15) 
                SolarReadingTypeKind_none,  //@Value(0) 
                SolarReadingTypeKind_Vb,  //@Value(16) 
                SolarReadingTypeKind_Vc,  //@Value(17) 
                SolarReadingTypeKind_Vab,  //@Value(18) 
                SolarReadingTypeKind_Vbc,  //@Value(19) 
                SolarReadingTypeKind_Vca,  //@Value(20) 
                SolarReadingTypeKind_PAa,  //@Value(21) 
                SolarReadingTypeKind_PAb,  //@Value(22) 
                SolarReadingTypeKind_PAc,  //@Value(23) 
                SolarReadingTypeKind_kVARa,  //@Value(24) 
                SolarReadingTypeKind_kVARb,  //@Value(25) 
                SolarReadingTypeKind_kVARc,  //@Value(26) 
                SolarReadingTypeKind_kVAR,  //@Value(27) 
                SolarReadingTypeKind_other  //@Value(1) 
            };
            enum SwitchEventKind {
                SwitchEventKind_closed,  //@Value(3) 
                SwitchEventKind_open,  //@Value(2) 
                SwitchEventKind_none,  //@Value(0) 
                SwitchEventKind_other  //@Value(1) 
            };
            enum UnitMultiplierKind {
                UnitMultiplierKind_centi,  //@Value(2) 
                UnitMultiplierKind_deci,  //@Value(3) 
                UnitMultiplierKind_Giga,  //@Value(4) 
                UnitMultiplierKind_kilo,  //@Value(5) 
                UnitMultiplierKind_milli,  //@Value(8) 
                UnitMultiplierKind_Mega,  //@Value(6) 
                UnitMultiplierKind_micro,  //@Value(7) 
                UnitMultiplierKind_nano,  //@Value(9) 
                UnitMultiplierKind_none,  //@Value(0) 
                UnitMultiplierKind_pico,  //@Value(10) 
                UnitMultiplierKind_Tera,  //@Value(11) 
                UnitMultiplierKind_other  //@Value(1) 
            };
            enum UnitSymbolKind {
                UnitSymbolKind_Amp,  //@Value(5) 
                UnitSymbolKind_deg,  //@Value(9) 
                UnitSymbolKind_degC,  //@Value(23) 
                UnitSymbolKind_degF,  //@Value(279) 
                UnitSymbolKind_Farad,  //@Value(25) 
                UnitSymbolKind_gram,  //@Value(3) 
                UnitSymbolKind_hour,  //@Value(160) 
                UnitSymbolKind_Henry,  //@Value(28) 
                UnitSymbolKind_Hz,  //@Value(33) 
                UnitSymbolKind_Joule,  //@Value(31) 
                UnitSymbolKind_meter,  //@Value(2) 
                UnitSymbolKind_m2,  //@Value(41) 
                UnitSymbolKind_m3,  //@Value(166) 
                UnitSymbolKind_min,  //@Value(159) 
                UnitSymbolKind_mph,  //@Value(500) 
                UnitSymbolKind_Newton,  //@Value(32) 
                UnitSymbolKind_none,  //@Value(0) 
                UnitSymbolKind_ohm,  //@Value(30) 
                UnitSymbolKind_Pa,  //@Value(39) 
                UnitSymbolKind_rad,  //@Value(10) 
                UnitSymbolKind_Siemens,  //@Value(53) 
                UnitSymbolKind_sec,  //@Value(27) 
                UnitSymbolKind_V,  //@Value(29) 
                UnitSymbolKind_VA,  //@Value(61) 
                UnitSymbolKind_VAh,  //@Value(71) 
                UnitSymbolKind_VAr,  //@Value(63) 
                UnitSymbolKind_VArh,  //@Value(73) 
                UnitSymbolKind_W,  //@Value(38) 
                UnitSymbolKind_Wh,  //@Value(72) 
                UnitSymbolKind_wPerVA,  //@Value(65) 
                UnitSymbolKind_wPerM2,  //@Value(179) 
                UnitSymbolKind_hzPerS,  //@Value(75) 
                UnitSymbolKind_wPerS,  //@Value(81) 
                UnitSymbolKind_other  //@Value(100) 
            };
        }; /* module commonmodule */

        module essmodule {
            struct ESSControlProfile;
            struct ESSControlScheduleProfile;
            struct ESSStatusProfile;
            struct ESSEventProfile;
            struct ESSReadingProfile;
        }; /* module essmodule */

        module generationmodule {
            struct GenerationControlScheduleProfile;
            struct GenerationControlProfile;
            struct GenerationForecastProfile;
            struct GenerationReadingProfile;
            struct GenerationEventProfile;
            struct GenerationStatusProfile;
        }; /* module generationmodule */

        module interchangemodule {
            struct InterchangeScheduleProfile;
        }; /* module interchangemodule */

        module interconnectionmodule {
            struct PlannedInterconnectionScheduleProfile;
            struct RequestedInterconnectionScheduleProfile;
        }; /* module interconnectionmodule */

        module loadmodule {
            struct LoadControlScheduleProfile;
            struct LoadControlProfile;
            struct LoadForecastProfile;
            struct LoadReadingProfile;
            struct LoadStatusProfile;
        }; /* module loadmodule */

        module motoroperatedswitchmodule {
            struct MotorOperatedSwitchControlProfile;
            struct MotorOperatedSwitchControlScheduleProfile;
            struct MotorOperatedSwitchEventProfile;
            struct MotorOperatedSwitchReadingProfile;
            struct MotorOperatedSwitchStatusProfile;
        }; /* module motoroperatedswitchmodule */

        module optimizermodule {
            struct ESSControlScheduleProfileList;
            struct LoadControlScheduleProfileList;
            struct PlannedInterconnectionScheduleProfileList;
            struct PlannedOptimizerScheduleProfile;
            struct RegulatorControlScheduleProfileList;
            struct RequestedInterconnectionScheduleProfileList;
            struct SolarControlScheduleProfileList;
            struct RequestedOptimizerScheduleProfile;
        }; /* module optimizermodule */

        module reclosermodule {
            struct RecloserControlProfile;
            struct RecloserEventProfile;
            struct RecloserReadingProfile;
            struct RecloserStatusProfile;
        }; /* module reclosermodule */

        module regulatormodule {
            struct RegulatorControlScheduleProfile;
            struct RegulatorStatusProfile;
            struct RegulatorEventProfile;
            struct RegulatorReadingProfile;
        }; /* module regulatormodule */

        module resourcemodule {
            struct ResourceReadingProfile;
            struct ResourceStatusProfile;
        }; /* module resourcemodule */

        module securitymodule {
            struct SecurityEventProfile;
        }; /* module securitymodule */

        module shuntmodule {
            struct ShuntControlScheduleProfile;
            struct ShuntControlProfile;
            struct ShuntStatusProfile;
            struct ShuntReadingProfile;
        }; /* module shuntmodule */

        module solarmodule {
            struct SolarControlScheduleProfile;
            struct SolarCapabilityProfile;
            struct SolarControlProfile;
            struct SolarForecastProfile;
            struct SolarEventProfile;
            struct SolarReadingProfile;
            struct SolarStatusProfile;
        }; /* module solarmodule */

        module weathermodule {
            struct WeatherDataProfile;
        }; /* module weathermodule */

    }; /* module openfmb */

}; /* module OpenFMB_Information_Model */

module OpenFMB_Information_Model {
    module openfmb {
        module commonmodule {
            struct ActivePower {
                float value;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::UnitSymbolKind unit;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::UnitMultiplierKind multiplier;  //@Optional
            };  //@nested(TRUE) 

            struct BasicIntervalSchedule {
                UML_Extension::dateTime startTime;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::UnitMultiplierKind value1Multiplier;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::UnitSymbolKind value1Unit;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::UnitMultiplierKind value2Multiplier;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::UnitSymbolKind value2Unit;  //@Optional
            };  //@nested(TRUE) 

            struct Container {
                string logicalDeviceID;  //@Key
                UML_Extension::dateTime timestamp;
            };  //@nested(TRUE) 

            struct CurveData {
                float xvalue;  //@Optional
                float yvalue;  //@Optional
            };  //@nested(TRUE) 

            struct CurveDataList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::CurveData>  curveData;
            };  //@nested(TRUE) 

            struct DateTimeInterval {
                UML_Extension::dateTime end;  //@Optional
                UML_Extension::dateTime start;  //@Optional
            };  //@nested(TRUE) 

            struct HumidityData {
                UML_Extension::dateTime timestamp;  //@Optional
                float value;  //@Optional
            };  //@nested(TRUE) 

            struct HumidityDataList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::HumidityData>  humidityData;
            };  //@nested(TRUE) 

            struct IrregularTimePoint {
                float value1;  //@Optional
                float value2;  //@Optional
            };  //@nested(TRUE) 

            struct IrregularTimePointList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::IrregularTimePoint>  irregularTimePoint;
            };  //@nested(TRUE) 

            struct MarketFactors {
                UML_Extension::dateTime intervalEndTime;  //@Optional
                UML_Extension::dateTime intervalStartTime;  //@Optional
            };  //@nested(TRUE) 

            struct MarketRun {
                OpenFMB_Information_Model::openfmb::commonmodule::ExecutionKind executionType;  //@Optional
                UML_Extension::dateTime marketEndTime;  //@Optional
                string marketID;  //@Optional
                string marketRunID;  //@Optional
                UML_Extension::dateTime marketStartTime;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::MarketKind marketType;  //@Optional
                string marketTypeExtension;  //@Optional
                string executionTypeExtension;  //@Optional
            };  //@nested(TRUE) 

            struct MarketRunList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::MarketRun>  marketRun;
            };  //@nested(TRUE) 

            struct MotorOperatedSwitchEvent {
                OpenFMB_Information_Model::openfmb::commonmodule::HexBinary16 qualityFlag;  //@Optional
                UML_Extension::dateTime timestamp;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::SwitchEventKind type;
                string typeExtension;  //@Optional
            };  //@nested(TRUE) 

            struct Reading {
                OpenFMB_Information_Model::openfmb::commonmodule::HexBinary16 qualityFlag;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::DateTimeInterval timePeriod;  //@Optional
                float value;
            };  //@nested(TRUE) 

            struct RecloserEvent {
                boolean isBlocked;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::SwitchEventKind type;
                boolean normalOpen;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::HexBinary16 qualityFlag;  //@Optional
                UML_Extension::dateTime timestamp;  //@Optional
                string typeExtension;  //@Optional
            };  //@nested(TRUE) 

            struct RecloserReading : OpenFMB_Information_Model::openfmb::commonmodule::Reading {
                string typeExtension;  //@Optional
                string terminalID;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::RecloserReadingTypeKind type;
            };  //@nested(TRUE) 

            struct RecloserReadingList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::RecloserReading>  recloserReading;
            };  //@nested(TRUE) 

            struct RegulatorEvent {
                OpenFMB_Information_Model::openfmb::commonmodule::HexBinary16 qualityFlag;  //@Optional
                UML_Extension::dateTime timestamp;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::RegulatorEventKind type;
                string typeExtension;  //@Optional
            };  //@nested(TRUE) 

            struct RegulatorReading : OpenFMB_Information_Model::openfmb::commonmodule::Reading {
                string typeExtension;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::RegulatorReadingTypeKind type;
            };  //@nested(TRUE) 

            struct RegulatorReadingList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::RegulatorReading>  regulatorReading;
            };  //@nested(TRUE) 

            struct ResourceReading : OpenFMB_Information_Model::openfmb::commonmodule::Reading {
                string typeExtension;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::ResourceReadingTypeKind type;
            };  //@nested(TRUE) 

            struct ResourceReadingList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::ResourceReading>  resourceReading;
            };  //@nested(TRUE) 

            struct SetPoint {
                OpenFMB_Information_Model::openfmb::commonmodule::UnitMultiplierKind multiplier;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::UnitSymbolKind unit;  //@Optional
                string name;  //@Optional
                float value;  //@Optional
            };  //@nested(TRUE) 

            struct SetPointList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::SetPoint>  setPoint;
            };  //@nested(TRUE) 

            struct ShuntControl {
                string issueID;  //@Optional
                string name;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::DateTimeInterval scheduledInterval;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::ShuntControlKind type;
                string typeExtension;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::SetPointList  setPointList; //@Optional
            };  //@nested(TRUE) 

            struct ShuntReading : OpenFMB_Information_Model::openfmb::commonmodule::Reading {
                string typeExtension;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::ShuntReadingTypeKind type;
            };  //@nested(TRUE) 

            struct ShuntReadingList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::ShuntReading>  shuntReading;
            };  //@nested(TRUE) 

            struct SolarCapability {
                float ahrRtg;  //@Optional
                string qualityFlag;  //@Optional
                UML_Extension::dateTime timestamp;  //@Optional
                float voltage;  //@Optional
                float wRtgMaxVal;  //@Optional
                float wRtgMinVal;  //@Optional
            };  //@nested(TRUE) 

            struct SolarControl {
                boolean isIslanded;  //@Optional
                string issueID;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::DateTimeInterval scheduledInterval;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::SolarControlKind type;
                string typeExtension;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::SetPointList  setPointList; //@Optional
            };  //@nested(TRUE) 

            struct SolarInverterEvent {
                boolean isConnected;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::SolarEventKind type;
                UML_Extension::dateTime timestamp;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::HexBinary16 qualityFlag;  //@Optional
                string typeExtension;  //@Optional
            };  //@nested(TRUE) 

            struct SolarReading : OpenFMB_Information_Model::openfmb::commonmodule::Reading {
                string typeExtension;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::SolarReadingTypeKind type;
            };  //@nested(TRUE) 

            struct SolarReadingList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::SolarReading>  solarReading;
            };  //@nested(TRUE) 

            struct StringMeasurementValue {
                OpenFMB_Information_Model::openfmb::commonmodule::HexBinary16 qualityFlag;  //@Optional
                string source;  //@Optional
                UML_Extension::dateTime timeStamp;  //@Optional
                string value;
            };  //@nested(TRUE) 

            struct SunRadiationData {
                UML_Extension::dateTime timestamp;  //@Optional
                float value;  //@Optional
            };  //@nested(TRUE) 

            struct SunRadiationDataList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::SunRadiationData>  sunRadiationData;
            };  //@nested(TRUE) 

            struct TemperatureData {
                UML_Extension::dateTime timestamp;  //@Optional
                float value;  //@Optional
            };  //@nested(TRUE) 

            struct TemperatureDataList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::TemperatureData>  temperatureData;
            };  //@nested(TRUE) 

            struct WindData {
                UML_Extension::dateTime timestamp;  //@Optional
                float windDirection;  //@Optional
                float windSpeed;  //@Optional
            };  //@nested(TRUE) 

            struct WindDataList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::WindData>  windData;
            };  //@nested(TRUE) 

        }; /* module commonmodule */

    }; /* module openfmb */

}; /* module OpenFMB_Information_Model */

module OpenFMB_Information_Model {
    module openfmb {
        module commonmodule {
            struct AnalogValue {
                OpenFMB_Information_Model::openfmb::commonmodule::HexBinary16 qualityFlag;  //@Optional
                string source;  //@Optional
                UML_Extension::dateTime timeStamp;  //@Optional
                float value;
            };  //@nested(TRUE) 

            struct BooleanMeasurementValue {
                OpenFMB_Information_Model::openfmb::commonmodule::HexBinary16 qualityFlag;  //@Optional
                string source;  //@Optional
                UML_Extension::dateTime timeStamp;  //@Optional
                boolean value;
            };  //@nested(TRUE) 

            struct BreakerEvent {
                boolean isBlocked;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::SwitchEventKind type;
                boolean normalOpen;  //@Optional
                UML_Extension::dateTime timestamp;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::HexBinary16 qualityFlag;  //@Optional
                string typeExtension;  //@Optional
            };  //@nested(TRUE) 

            struct BreakerReading : OpenFMB_Information_Model::openfmb::commonmodule::Reading {
                string terminalID;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::BreakerReadingTypeKind type;
                string typeExtension;  //@Optional
            };  //@nested(TRUE) 

            struct BreakerReadingList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::BreakerReading>  breakerReading;
            };  //@nested(TRUE) 

            struct Curve {
                OpenFMB_Information_Model::openfmb::commonmodule::CurveStyleKind curveStyle;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::UnitMultiplierKind xMultiplier;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::UnitSymbolKind xUnit;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::UnitMultiplierKind yMultiplier;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::UnitSymbolKind yUnit;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::CurveNameKind name;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::CurveDataList  curveDataList;
            };  //@nested(TRUE) 

            struct DiscreteValue {
                OpenFMB_Information_Model::openfmb::commonmodule::HexBinary16 qualityFlag;  //@Optional
                string source;  //@Optional
                UML_Extension::dateTime timeStamp;  //@Optional
                long value;
            };  //@nested(TRUE) 

            struct ESSControl {
                string issueID;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::DateTimeInterval scheduledInterval;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::InverterModeKind inverterMode;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::ESSControlKind type;
                string typeExtension;  //@Optional
                string inverterModeExtension;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::SetPointList  setPointList; //@Optional
            };  //@nested(TRUE) 

            struct ESSControlSchedule : OpenFMB_Information_Model::openfmb::commonmodule::Curve {
                OpenFMB_Information_Model::openfmb::commonmodule::InverterModeKind inverterMode;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::DateTimeInterval dateTimeInterval;  //@Optional
                string inverterModeExtension;  //@Optional
            };  //@nested(TRUE) 

            struct ESSControlScheduleList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::ESSControlSchedule>  essControlSchedule;
            };  //@nested(TRUE) 

            struct ESSEvent {
                boolean isConnected;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::ESSEventKind type;
                float stateOfCharge;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::HexBinary16 qualityFlag;  //@Optional
                UML_Extension::dateTime timestamp;  //@Optional
                string typeExtension;  //@Optional
            };  //@nested(TRUE) 

            struct ESSReading : OpenFMB_Information_Model::openfmb::commonmodule::Reading {
                string typeExtension;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::ESSReadingTypeKind type;
            };  //@nested(TRUE) 

            struct ESSReadingList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::ESSReading>  essReading;
            };  //@nested(TRUE) 

            struct ForecastSchedule : OpenFMB_Information_Model::openfmb::commonmodule::BasicIntervalSchedule {
                string version;  //@Optional
                UML_Extension::dateTime versionDateTime;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::IrregularTimePointList  irregularTimePointList; //@Optional
            };  //@nested(TRUE) 

            struct GenerationControl {
                string issueID;  //@Optional
                string name;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::DateTimeInterval scheduledInterval;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::GenerationControlKind type;
                string typeExtension;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::SetPointList  setPointList; //@Optional
            };  //@nested(TRUE) 

            struct GenerationControlSchedule : OpenFMB_Information_Model::openfmb::commonmodule::Curve {
                OpenFMB_Information_Model::openfmb::commonmodule::DateTimeInterval dateTimeInterval;  //@Optional
            };  //@nested(TRUE) 

            struct GenerationControlScheduleList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::GenerationControlSchedule>  generationControlSchedule;
            };  //@nested(TRUE) 

            struct GenerationEvent {
                boolean isAutoOn;  //@Optional
                boolean isConnected;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::GenerationEventKind type;
                OpenFMB_Information_Model::openfmb::commonmodule::HexBinary16 qualityFlag;  //@Optional
                UML_Extension::dateTime timestamp;  //@Optional
                string typeExtension;  //@Optional
            };  //@nested(TRUE) 

            struct GenerationReading : OpenFMB_Information_Model::openfmb::commonmodule::Reading {
                string typeExtension;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::GenerationReadingTypeKind type;
            };  //@nested(TRUE) 

            struct GenerationReadingList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::GenerationReading>  generationReading;
            };  //@nested(TRUE) 

            struct Humidity {
                OpenFMB_Information_Model::openfmb::commonmodule::UnitSymbolKind unit;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::HumidityDataList  humidityDataList; //@Optional
            };  //@nested(TRUE) 

            struct IdentifiedObject {
                OpenFMB_Information_Model::openfmb::commonmodule::uuidType mRID;  //@Optional
                string description;  //@Optional
                string name;  //@Optional
            };  //@nested(TRUE) 

            struct InterconnectionPoint : OpenFMB_Information_Model::openfmb::commonmodule::IdentifiedObject {
                octet __dummy_prevent_empty_class_InterconnectionPoint;
            };  //@nested(TRUE) 

            struct InterconnectionSchedule : OpenFMB_Information_Model::openfmb::commonmodule::Curve {
                OpenFMB_Information_Model::openfmb::commonmodule::InverterModeKind inverterMode;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::ScheduleTypeKind type;
                OpenFMB_Information_Model::openfmb::commonmodule::DateTimeInterval dateTimeInterval;  //@Optional
                string typeExtension;  //@Optional
                string inverterModeExtension;  //@Optional
            };  //@nested(TRUE) 

            struct InterconnectionScheduleList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::InterconnectionSchedule>  interconnectionSchedule;
            };  //@nested(TRUE) 

            struct LoadControl {
                string issueID;  //@Optional
                string name;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::DateTimeInterval scheduledInterval;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::LoadControlKind type;
                string typeExtension;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::SetPointList  setPointList; //@Optional
            };  //@nested(TRUE) 

            struct LoadControlSchedule : OpenFMB_Information_Model::openfmb::commonmodule::Curve {
                OpenFMB_Information_Model::openfmb::commonmodule::DateTimeInterval dateTimeInterval;  //@Optional
            };  //@nested(TRUE) 

            struct LoadControlScheduleList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::LoadControlSchedule>  loadControlSchedule;
            };  //@nested(TRUE) 

            struct LoadReading : OpenFMB_Information_Model::openfmb::commonmodule::Reading {
                string typeExtension;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::LoadReadingTypeKind type;
            };  //@nested(TRUE) 

            struct LoadReadingList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::LoadReading>  loadReading;
            };  //@nested(TRUE) 

            struct MarketFactorList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::MarketFactors>  marketFactor;
            };  //@nested(TRUE) 

            struct MotorOperatedSwitch : OpenFMB_Information_Model::openfmb::commonmodule::IdentifiedObject {
                octet __dummy_prevent_empty_class_MotorOperatedSwitch;
            };  //@nested(TRUE) 

            struct MotorOperatedSwitchControl {
                string name;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::MotorOperatedSwitchControlKind type;
                string issueID;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::DateTimeInterval scheduledInterval;  //@Optional
                string typeExtension;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::SetPointList  setPointList; //@Optional
            };  //@nested(TRUE) 

            struct MotorOperatedSwitchControlSchedule : OpenFMB_Information_Model::openfmb::commonmodule::Curve {
                OpenFMB_Information_Model::openfmb::commonmodule::DateTimeInterval dateTimeInterval;  //@Optional
            };  //@nested(TRUE) 

            struct MotorOperatedSwitchControlScheduleList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::MotorOperatedSwitchControlSchedule>  motorOperatedSwitchControlSchedule;
            };  //@nested(TRUE) 

            struct MotorOperatedSwitchReading : OpenFMB_Information_Model::openfmb::commonmodule::Reading {
                string typeExtension;  //@Optional
                string terminalID;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::MotorOperatedSwitchReadingTypeKind type;
            };  //@nested(TRUE) 

            struct MotorOperatedSwitchReadingList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::MotorOperatedSwitchReading>  motorOperatedSwitchReading;
            };  //@nested(TRUE) 

            struct PowerSystemResource : OpenFMB_Information_Model::openfmb::commonmodule::IdentifiedObject {
                octet __dummy_prevent_empty_class_PowerSystemResource;
            };  //@nested(TRUE) 

            struct Recloser : OpenFMB_Information_Model::openfmb::commonmodule::IdentifiedObject {
                boolean normalOpen;  //@Optional
            };  //@nested(TRUE) 

            struct RecloserControl {
                string name;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::RecloserControlKind type;
                string issueID;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::DateTimeInterval scheduledInterval;  //@Optional
                string typeExtension;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::SetPointList  setPointList; //@Optional
            };  //@nested(TRUE) 

            struct RegulatorControlSchedule : OpenFMB_Information_Model::openfmb::commonmodule::Curve {
                OpenFMB_Information_Model::openfmb::commonmodule::DateTimeInterval dateTimeInterval;  //@Optional
            };  //@nested(TRUE) 

            struct RegulatorControlScheduleList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::RegulatorControlSchedule>  regulatorControlSchedule;
            };  //@nested(TRUE) 

            struct RegulatorSystem : OpenFMB_Information_Model::openfmb::commonmodule::IdentifiedObject {
                octet __dummy_prevent_empty_class_RegulatorSystem;
            };  //@nested(TRUE) 

            struct ShuntControlSchedule : OpenFMB_Information_Model::openfmb::commonmodule::Curve {
                OpenFMB_Information_Model::openfmb::commonmodule::DateTimeInterval dateTimeInterval;  //@Optional
            };  //@nested(TRUE) 

            struct ShuntControlScheduleList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::ShuntControlSchedule>  shuntControlSchedule;
            };  //@nested(TRUE) 

            struct ShuntSystem : OpenFMB_Information_Model::openfmb::commonmodule::IdentifiedObject {
                octet __dummy_prevent_empty_class_ShuntSystem;
            };  //@nested(TRUE) 

            struct SolarControlSchedule : OpenFMB_Information_Model::openfmb::commonmodule::Curve {
                OpenFMB_Information_Model::openfmb::commonmodule::InverterModeKind inverterMode;
                OpenFMB_Information_Model::openfmb::commonmodule::DateTimeInterval dateTimeInterval;  //@Optional
                string inverterModeExtension;  //@Optional
            };  //@nested(TRUE) 

            struct SolarControlScheduleList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::SolarControlSchedule>  solarControlSchedule;
            };  //@nested(TRUE) 

            struct SolarInverter : OpenFMB_Information_Model::openfmb::commonmodule::IdentifiedObject {
                octet __dummy_prevent_empty_class_SolarInverter;
            };  //@nested(TRUE) 

            struct StringMeasurement {
                string mRID;  //@Optional
                string description;  //@Optional
                string measurementType;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::UnitMultiplierKind multiplier;  //@Optional
                string name;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::PhaseCodeKind phases;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::UnitSymbolKind unit;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::StringMeasurementValue  stringMeasurementValue;
            };  //@nested(TRUE) 

            struct StringMeasurementList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::StringMeasurement>  stringMeasurement;
            };  //@nested(TRUE) 

            struct SunRadiation {
                OpenFMB_Information_Model::openfmb::commonmodule::UnitMultiplierKind multiplier;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::UnitSymbolKind unit;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::SunRadiationDataList  sunRadiationDataList; //@Optional
            };  //@nested(TRUE) 

            struct Temperature {
                OpenFMB_Information_Model::openfmb::commonmodule::UnitSymbolKind unit;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::TemperatureDataList  temperatureDataList; //@Optional
            };  //@nested(TRUE) 

            struct Wind {
                OpenFMB_Information_Model::openfmb::commonmodule::UnitSymbolKind directionUnit;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::UnitSymbolKind speedUnit;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::WindDataList  windDataList; //@Optional
            };  //@nested(TRUE) 

        }; /* module commonmodule */

        module interconnectionmodule {
            struct PlannedInterconnectionScheduleProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::InterconnectionPoint  interconnectionPoint;
                OpenFMB_Information_Model::openfmb::commonmodule::InterconnectionScheduleList  interconnectionScheduleList;
            };  //@nested(FALSE) 

            struct RequestedInterconnectionScheduleProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::InterconnectionPoint  interconnectionPoint;
                OpenFMB_Information_Model::openfmb::commonmodule::InterconnectionScheduleList  interconnectionScheduleList;
            };  //@nested(FALSE) 

        }; /* module interconnectionmodule */

        module motoroperatedswitchmodule {
            struct MotorOperatedSwitchControlProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::MotorOperatedSwitch  motorOperatedSwitch;
                OpenFMB_Information_Model::openfmb::commonmodule::MotorOperatedSwitchControl  motorOperatedSwitchControl;
            };  //@nested(FALSE) 

            struct MotorOperatedSwitchControlScheduleProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::MotorOperatedSwitch  motorOperatedSwitch;
                OpenFMB_Information_Model::openfmb::commonmodule::MotorOperatedSwitchControlScheduleList  motorOperatedSwitchControlScheduleList;
            };  //@nested(FALSE) 

            struct MotorOperatedSwitchEventProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::MotorOperatedSwitch  motorOperatedSwitch;
                OpenFMB_Information_Model::openfmb::commonmodule::MotorOperatedSwitchEvent  motorOperatedSwitchEvent;
            };  //@nested(FALSE) 

            struct MotorOperatedSwitchReadingProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::MotorOperatedSwitchReadingList  motorOperatedSwitchReadingList;
                OpenFMB_Information_Model::openfmb::commonmodule::MotorOperatedSwitch  motorOperatedSwitch;
            };  //@nested(FALSE) 

        }; /* module motoroperatedswitchmodule */

        module optimizermodule {
            struct PlannedInterconnectionScheduleProfileList {
                sequence<OpenFMB_Information_Model::openfmb::interconnectionmodule::PlannedInterconnectionScheduleProfile>  plannedInterconnectionScheduleProfile;
            };  //@nested(TRUE) 

            struct RequestedInterconnectionScheduleProfileList {
                sequence<OpenFMB_Information_Model::openfmb::interconnectionmodule::RequestedInterconnectionScheduleProfile>  requestedInterconnectionScheduleProfile;
            };  //@nested(TRUE) 

        }; /* module optimizermodule */

        module reclosermodule {
            struct RecloserControlProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::Recloser  recloser;
                OpenFMB_Information_Model::openfmb::commonmodule::RecloserControl  recloserControl;
            };  //@nested(FALSE) 

            struct RecloserEventProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::Recloser  recloser;
                OpenFMB_Information_Model::openfmb::commonmodule::RecloserEvent  recloserEvent;
            };  //@nested(FALSE) 

            struct RecloserReadingProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::Recloser  recloser;
                OpenFMB_Information_Model::openfmb::commonmodule::RecloserReadingList  recloserReadingList;
            };  //@nested(FALSE) 

        }; /* module reclosermodule */

        module regulatormodule {
            struct RegulatorControlScheduleProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::RegulatorControlScheduleList  regulatorControlScheduleList;
                OpenFMB_Information_Model::openfmb::commonmodule::RegulatorSystem  regulatorSystem;
            };  //@nested(FALSE) 

            struct RegulatorEventProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::RegulatorEvent  regulatorEvent;
                OpenFMB_Information_Model::openfmb::commonmodule::RegulatorSystem  regulatorSystem;
            };  //@nested(FALSE) 

            struct RegulatorReadingProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::RegulatorSystem  regulatorSystem;
                OpenFMB_Information_Model::openfmb::commonmodule::RegulatorReadingList  regulatorReadingList;
            };  //@nested(FALSE) 

        }; /* module regulatormodule */

        module shuntmodule {
            struct ShuntControlScheduleProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::ShuntControlScheduleList  shuntControlScheduleList;
                OpenFMB_Information_Model::openfmb::commonmodule::ShuntSystem  shuntSystem;
            };  //@nested(FALSE) 

            struct ShuntControlProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::ShuntSystem  shuntSystem;
                OpenFMB_Information_Model::openfmb::commonmodule::ShuntControl  shuntControl;
            };  //@nested(FALSE) 

            struct ShuntReadingProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::ShuntSystem  shuntSystem;
                OpenFMB_Information_Model::openfmb::commonmodule::ShuntReadingList  shuntReadingList;
            };  //@nested(FALSE) 

        }; /* module shuntmodule */

        module solarmodule {
            struct SolarControlScheduleProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::SolarInverter  solarInverter;
                OpenFMB_Information_Model::openfmb::commonmodule::SolarControlScheduleList  solarControlScheduleList;
            };  //@nested(FALSE) 

            struct SolarCapabilityProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::SolarCapability  solarCapability;
                OpenFMB_Information_Model::openfmb::commonmodule::SolarInverter  solarInverter;
            };  //@nested(FALSE) 

            struct SolarControlProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::SolarInverter  solarInverter;
                OpenFMB_Information_Model::openfmb::commonmodule::SolarControl  solarControl;
            };  //@nested(FALSE) 

            struct SolarForecastProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::SolarInverter  solarInverter;
                OpenFMB_Information_Model::openfmb::commonmodule::ForecastSchedule  forecastSchedule;
            };  //@nested(FALSE) 

            struct SolarEventProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::SolarInverter  solarInverter;
                OpenFMB_Information_Model::openfmb::commonmodule::SolarInverterEvent  solarInverterEvent;
            };  //@nested(FALSE) 

            struct SolarReadingProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::SolarInverter  solarInverter;
                OpenFMB_Information_Model::openfmb::commonmodule::SolarReadingList  solarReadingList;
            };  //@nested(FALSE) 

        }; /* module solarmodule */

    }; /* module openfmb */

}; /* module OpenFMB_Information_Model */

module OpenFMB_Information_Model {
    module openfmb {
        module commonmodule {
            struct Analog {
                string mRID;  //@Optional
                string description;  //@Optional
                string measurementType;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::UnitMultiplierKind multiplier;  //@Optional
                string name;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::PhaseCodeKind phases;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::UnitSymbolKind unit;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::AnalogValue  analogMeasurementValue;
            };  //@nested(TRUE) 

            struct AnalogMeasurementList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::Analog>  analogMeasurement;
            };  //@nested(TRUE) 

            struct BooleanMeasurement {
                string mRID;  //@Optional
                string description;  //@Optional
                string measurementType;  //@Optional
                string name;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::PhaseCodeKind phases;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::BooleanMeasurementValue  booleanMeasurementValue;
            };  //@nested(TRUE) 

            struct BooleanMeasurementList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::BooleanMeasurement>  booleanMeasurement;
            };  //@nested(TRUE) 

            struct Breaker : OpenFMB_Information_Model::openfmb::commonmodule::IdentifiedObject {
                octet __dummy_prevent_empty_class_Breaker;
            };  //@nested(TRUE) 

            struct Discrete {
                string mRID;  //@Optional
                string description;  //@Optional
                string measurementType;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::UnitMultiplierKind multiplier;  //@Optional
                string name;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::PhaseCodeKind phases;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::UnitSymbolKind unit;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::DiscreteValue  discreteMeasurementValue;
            };  //@nested(TRUE) 

            struct DiscreteMeasurementList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::Discrete>  discreteMeasurement;
            };  //@nested(TRUE) 

            struct EnergyConsumer : OpenFMB_Information_Model::openfmb::commonmodule::IdentifiedObject {
                string operatingLimit;  //@Optional
            };  //@nested(TRUE) 

            struct ESS : OpenFMB_Information_Model::openfmb::commonmodule::IdentifiedObject {
                octet __dummy_prevent_empty_class_ESS;
            };  //@nested(TRUE) 

            struct Event : OpenFMB_Information_Model::openfmb::commonmodule::IdentifiedObject {
                UML_Extension::dateTime timestamp;  //@Optional
                string type;
                string value;  //@Optional
                string typeExtension;  //@Optional
            };  //@nested(TRUE) 

            struct GeneratingUnit : OpenFMB_Information_Model::openfmb::commonmodule::IdentifiedObject {
                OpenFMB_Information_Model::openfmb::commonmodule::ActivePower maxOperatingP;  //@Optional
            };  //@nested(TRUE) 

            struct Market : OpenFMB_Information_Model::openfmb::commonmodule::IdentifiedObject {
                UML_Extension::dateTime actualEnd;  //@Optional
                UML_Extension::dateTime actualStart;  //@Optional
                boolean dst;  //@Optional
                UML_Extension::dateTime end;  //@Optional
                string localTimeZone;  //@Optional
                UML_Extension::dateTime start;  //@Optional
                string status;  //@Optional
                float timeIntervalLength;  //@Optional
                UML_Extension::dateTime tradingDay;  //@Optional
                string tradingPeriod;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::MarketFactorList  marketFactorList; //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::MarketRunList  marketRunList; //@Optional
            };  //@nested(TRUE) 

            struct Meter : OpenFMB_Information_Model::openfmb::commonmodule::IdentifiedObject {
                OpenFMB_Information_Model::openfmb::commonmodule::PowerSystemResource  powerSystemResource; //@Optional
            };  //@nested(TRUE) 

            struct OptimizedMicroGridMarket : OpenFMB_Information_Model::openfmb::commonmodule::Market {
                octet __dummy_prevent_empty_class_OptimizedMicroGridMarket;
            };  //@nested(TRUE) 

            struct SecurityEvent : OpenFMB_Information_Model::openfmb::commonmodule::Event {
                string log;  //@Optional
                string severity;  //@Optional
            };  //@nested(TRUE) 

            struct Status {
                string description;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::DiscreteMeasurementList  discreteMeasurementList; //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::BooleanMeasurementList  booleanMeasurementList; //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::StringMeasurementList  stringMeasurementList; //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::AnalogMeasurementList  analogMeasurementList; //@Optional
            };  //@nested(TRUE) 

            struct WeatherData {
                string interval;  //@Optional
                string source;  //@Optional
                string version;  //@Optional
                UML_Extension::dateTime versionDateTime;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::Temperature  temperature; //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::Wind  wind; //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::Humidity  humidity; //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::SunRadiation  sunRadiation; //@Optional
            };  //@nested(TRUE) 

        }; /* module commonmodule */

        module essmodule {
            struct ESSControlProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::ESSControl  essControl;
                OpenFMB_Information_Model::openfmb::commonmodule::ESS  ess;
            };  //@nested(FALSE) 

            struct ESSControlScheduleProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::ESS  ess;
                OpenFMB_Information_Model::openfmb::commonmodule::ESSControlScheduleList  essControlScheduleList;
            };  //@nested(FALSE) 

            struct ESSEventProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::ESSEvent  essEvent;
                OpenFMB_Information_Model::openfmb::commonmodule::ESS  ess;
            };  //@nested(FALSE) 

            struct ESSReadingProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::ESSReadingList  essReadingList;
                OpenFMB_Information_Model::openfmb::commonmodule::ESS  ess;
            };  //@nested(FALSE) 

        }; /* module essmodule */

        module generationmodule {
            struct GenerationControlScheduleProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::GeneratingUnit  generatingUnit;
                OpenFMB_Information_Model::openfmb::commonmodule::GenerationControlScheduleList  generationControlScheduleList;
            };  //@nested(FALSE) 

            struct GenerationControlProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::GeneratingUnit  generatingUnit;
                OpenFMB_Information_Model::openfmb::commonmodule::GenerationControl  generationControl;
            };  //@nested(FALSE) 

            struct GenerationForecastProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::GeneratingUnit  generatingUnit;
                OpenFMB_Information_Model::openfmb::commonmodule::ForecastSchedule  forecastSchedule;
            };  //@nested(FALSE) 

            struct GenerationReadingProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::GenerationReadingList  generationReadingList;
                OpenFMB_Information_Model::openfmb::commonmodule::GeneratingUnit  generatingUnit;
            };  //@nested(FALSE) 

            struct GenerationEventProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::GeneratingUnit  generatingUnit;
                OpenFMB_Information_Model::openfmb::commonmodule::GenerationEvent  generationEvent;
            };  //@nested(FALSE) 

        }; /* module generationmodule */

        module loadmodule {
            struct LoadControlScheduleProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::EnergyConsumer  energyConsumer;
                OpenFMB_Information_Model::openfmb::commonmodule::LoadControlScheduleList  loadControlScheduleList;
            };  //@nested(FALSE) 

            struct LoadControlProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::EnergyConsumer  energyConsumer;
                OpenFMB_Information_Model::openfmb::commonmodule::LoadControl  loadControl;
            };  //@nested(FALSE) 

            struct LoadForecastProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::EnergyConsumer  energyConsumer;
                OpenFMB_Information_Model::openfmb::commonmodule::ForecastSchedule  forecastSchedule;
            };  //@nested(FALSE) 

            struct LoadReadingProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::EnergyConsumer  energyConsumer;
                OpenFMB_Information_Model::openfmb::commonmodule::LoadReadingList  loadReadingList;
            };  //@nested(FALSE) 

        }; /* module loadmodule */

        module optimizermodule {
            struct ESSControlScheduleProfileList {
                sequence<OpenFMB_Information_Model::openfmb::essmodule::ESSControlScheduleProfile>  essControlScheduleProfile;
            };  //@nested(TRUE) 

            struct LoadControlScheduleProfileList {
                sequence<OpenFMB_Information_Model::openfmb::loadmodule::LoadControlScheduleProfile>  loadControlScheduleProfile;
            };  //@nested(TRUE) 

            struct RegulatorControlScheduleProfileList {
                sequence<OpenFMB_Information_Model::openfmb::regulatormodule::RegulatorControlScheduleProfile>  regulatorControlScheduleProfile;
            };  //@nested(TRUE) 

            struct SolarControlScheduleProfileList {
                sequence<OpenFMB_Information_Model::openfmb::solarmodule::SolarControlScheduleProfile>  solarControlScheduleProfile;
            };  //@nested(TRUE) 

            struct RequestedOptimizerScheduleProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::optimizermodule::RegulatorControlScheduleProfileList  regulatorControlScheduleProfileList; //@Optional
                OpenFMB_Information_Model::openfmb::optimizermodule::SolarControlScheduleProfileList  solarControlScheduleProfileList; //@Optional
                OpenFMB_Information_Model::openfmb::optimizermodule::LoadControlScheduleProfileList  loadControlScheduleProfileList; //@Optional
                OpenFMB_Information_Model::openfmb::optimizermodule::RequestedInterconnectionScheduleProfileList  requestedInterconnectionScheduleProfileList; //@Optional
                OpenFMB_Information_Model::openfmb::optimizermodule::ESSControlScheduleProfileList  essControlScheduleProfileList; //@Optional
            };  //@nested(FALSE) 

        }; /* module optimizermodule */

        module resourcemodule {
            struct ResourceReadingProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::Meter  meter;
                OpenFMB_Information_Model::openfmb::commonmodule::ResourceReadingList  resourceReadingList;
            };  //@nested(FALSE) 

        }; /* module resourcemodule */

        module securitymodule {
            struct SecurityEventProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::SecurityEvent  securityEvent;
            };  //@nested(FALSE) 

        }; /* module securitymodule */

        module weathermodule {
            struct WeatherDataProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::WeatherData  weatherData;
            };  //@nested(FALSE) 

        }; /* module weathermodule */

    }; /* module openfmb */

}; /* module OpenFMB_Information_Model */

module OpenFMB_Information_Model {
    module openfmb {
        module breakermodule {
            struct BreakerEventProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::BreakerEvent  breakerEvent;
                OpenFMB_Information_Model::openfmb::commonmodule::Breaker  breaker;
            };  //@nested(FALSE) 

            struct BreakerReadingProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::BreakerReadingList  breakerReadingList;
                OpenFMB_Information_Model::openfmb::commonmodule::Breaker  breaker;
            };  //@nested(FALSE) 

        }; /* module breakermodule */

        module commonmodule {
            struct BreakerStatus : OpenFMB_Information_Model::openfmb::commonmodule::Status {
                octet __dummy_prevent_empty_class_BreakerStatus;
            };  //@nested(TRUE) 

            struct ESSStatus : OpenFMB_Information_Model::openfmb::commonmodule::Status {
                octet __dummy_prevent_empty_class_ESSStatus;
            };  //@nested(TRUE) 

            struct GenerationStatus : OpenFMB_Information_Model::openfmb::commonmodule::Status {
                octet __dummy_prevent_empty_class_GenerationStatus;
            };  //@nested(TRUE) 

            struct InterchangeSchedule : OpenFMB_Information_Model::openfmb::commonmodule::Curve {
                OpenFMB_Information_Model::openfmb::commonmodule::InterTieDirectionKind directionType;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::MarketProductKind energyType;  //@Optional
                long intervalLength;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::EnergyProductKind scheduleType;  //@Optional
                string scheduleTypeExtension;  //@Optional
                string directionTypeExtension;  //@Optional
                string energyTypeExtension;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::OptimizedMicroGridMarket  optimizedMicroGridMarket; //@Optional
            };  //@nested(TRUE) 

            struct InterchangeScheduleList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::InterchangeSchedule>  interchangeSchedule;
            };  //@nested(TRUE) 

            struct LoadStatus : OpenFMB_Information_Model::openfmb::commonmodule::Status {
                octet __dummy_prevent_empty_class_LoadStatus;
            };  //@nested(TRUE) 

            struct MotorOperatedSwitchStatus : OpenFMB_Information_Model::openfmb::commonmodule::Status {
                octet __dummy_prevent_empty_class_MotorOperatedSwitchStatus;
            };  //@nested(TRUE) 

            struct RecloserStatus : OpenFMB_Information_Model::openfmb::commonmodule::Status {
                octet __dummy_prevent_empty_class_RecloserStatus;
            };  //@nested(TRUE) 

            struct RegulatorStatus : OpenFMB_Information_Model::openfmb::commonmodule::Status {
                octet __dummy_prevent_empty_class_RegulatorStatus;
            };  //@nested(TRUE) 

            struct ResourceStatus : OpenFMB_Information_Model::openfmb::commonmodule::Status {
                octet __dummy_prevent_empty_class_ResourceStatus;
            };  //@nested(TRUE) 

            struct ShuntStatus : OpenFMB_Information_Model::openfmb::commonmodule::Status {
                octet __dummy_prevent_empty_class_ShuntStatus;
            };  //@nested(TRUE) 

            struct SolarStatus : OpenFMB_Information_Model::openfmb::commonmodule::Status {
                octet __dummy_prevent_empty_class_SolarStatus;
            };  //@nested(TRUE) 

        }; /* module commonmodule */

        module essmodule {
            struct ESSStatusProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::ESS  ess;
                OpenFMB_Information_Model::openfmb::commonmodule::ESSStatus  essStatus;
            };  //@nested(FALSE) 

        }; /* module essmodule */

        module generationmodule {
            struct GenerationStatusProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::GeneratingUnit  generatingUnit;
                OpenFMB_Information_Model::openfmb::commonmodule::GenerationStatus  generationStatus;
            };  //@nested(FALSE) 

        }; /* module generationmodule */

        module interchangemodule {
            struct InterchangeScheduleProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::InterchangeScheduleList  interchangeScheduleList;
                OpenFMB_Information_Model::openfmb::commonmodule::PowerSystemResource  powerSystemResource;
            };  //@nested(FALSE) 

        }; /* module interchangemodule */

        module loadmodule {
            struct LoadStatusProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::EnergyConsumer  energyConsumer;
                OpenFMB_Information_Model::openfmb::commonmodule::LoadStatus  loadStatus;
            };  //@nested(FALSE) 

        }; /* module loadmodule */

        module motoroperatedswitchmodule {
            struct MotorOperatedSwitchStatusProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::MotorOperatedSwitch  motorOperatedSwitch;
                OpenFMB_Information_Model::openfmb::commonmodule::MotorOperatedSwitchStatus  motorOperatedSwitchStatus;
            };  //@nested(FALSE) 

        }; /* module motoroperatedswitchmodule */

        module optimizermodule {
            struct PlannedOptimizerScheduleProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::optimizermodule::RegulatorControlScheduleProfileList  regulatorControlScheduleProfileList; //@Optional
                OpenFMB_Information_Model::openfmb::optimizermodule::SolarControlScheduleProfileList  solarControlScheduleProfileList; //@Optional
                OpenFMB_Information_Model::openfmb::optimizermodule::PlannedInterconnectionScheduleProfileList  plannedInterconnectionScheduleProfileList; //@Optional
                OpenFMB_Information_Model::openfmb::optimizermodule::LoadControlScheduleProfileList  loadControlScheduleProfileList; //@Optional
                OpenFMB_Information_Model::openfmb::optimizermodule::ESSControlScheduleProfileList  essControlScheduleProfileList; //@Optional
            };  //@nested(FALSE) 

        }; /* module optimizermodule */

        module reclosermodule {
            struct RecloserStatusProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::Recloser  recloser;
                OpenFMB_Information_Model::openfmb::commonmodule::RecloserStatus  recloserStatus;
            };  //@nested(FALSE) 

        }; /* module reclosermodule */

        module regulatormodule {
            struct RegulatorStatusProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::RegulatorSystem  regulatorSystem;
                OpenFMB_Information_Model::openfmb::commonmodule::RegulatorStatus  regulatorStatus;
            };  //@nested(FALSE) 

        }; /* module regulatormodule */

        module resourcemodule {
            struct ResourceStatusProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::ResourceStatus  resourceStatus;
                OpenFMB_Information_Model::openfmb::commonmodule::PowerSystemResource  powerSystemResource;
            };  //@nested(FALSE) 

        }; /* module resourcemodule */

        module shuntmodule {
            struct ShuntStatusProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::ShuntStatus  shuntStatus;
                OpenFMB_Information_Model::openfmb::commonmodule::ShuntSystem  shuntSystem;
            };  //@nested(FALSE) 

        }; /* module shuntmodule */

        module solarmodule {
            struct SolarStatusProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::SolarInverter  solarInverter;
                OpenFMB_Information_Model::openfmb::commonmodule::SolarStatus  solarStatus;
            };  //@nested(FALSE) 

        }; /* module solarmodule */

    }; /* module openfmb */

}; /* module OpenFMB_Information_Model */

module OpenFMB_Information_Model {
    module openfmb {
        module breakermodule {
            struct BreakerStatusProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::BreakerStatus  breakerStatus;
                OpenFMB_Information_Model::openfmb::commonmodule::Breaker  breaker;
            };  //@nested(FALSE) 

        }; /* module breakermodule */

    }; /* module openfmb */

}; /* module OpenFMB_Information_Model */

